<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>牛客论坛项目</title>
    <link href="/2022/07/30/%E7%89%9B%E5%AE%A2%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%E4%BB%BF%E5%86%99/"/>
    <url>/2022/07/30/%E7%89%9B%E5%AE%A2%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%E4%BB%BF%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>这个项目的整体结构来源于牛客网，主要使用了Springboot、Mybatis、MySQL、Redis、Kafka、等工具。主要实现了用户的注册、登录、发帖、点赞、系统通知、按热度排序、搜索等功能。另外引入了redis数据库来提升网站的整体性能，实现了用户凭证的存取、点赞关注的功能。基于 Kafka 实现了系统通知：当用户获得点赞、评论后得到通知。利用定时任务定期计算帖子的分数，并在页面上展现热帖排行榜。</p><p>用户表实现</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>salt</th><th>email</th><th>type</th><th>status</th><th>activation_code</th><th>header_url</th><th>cre</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>私信表的实现</strong></p><table><thead><tr><th>id</th><th>form_id</th><th>to_id</th><th>conversion_id</th><th>content</th><th>status</th><th>create_time</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>评论表的实现：</strong></p><table><thead><tr><th>id</th><th>user_id</th><th>entity_type</th><th>entity_id</th><th>target_id</th><th>content</th><th>status</th><th>create_time</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="密码MD5-Message-digestAlgorithm5-加密"><a href="#密码MD5-Message-digestAlgorithm5-加密" class="headerlink" title="密码MD5(Message-digestAlgorithm5)加密"></a>密码MD5(Message-digestAlgorithm5)加密</h2><p>为了保证安全，密码不能明文的在网络中进行传输，也不能以明文的形式存到数据库中。<br>存在数据库的密码 &#x3D; MD5( 密码 + salt ) 防止密码泄露</p><blockquote><p><a href="https://so.csdn.net/so/search?q=MD5&spm=1001.2101.3001.7020">MD5</a>加密</p><p>MD5算法为<strong>计算机安全领域</strong>广泛使用的一种<strong>散列函数</strong>，用于提供<strong>消息的完整性</strong>，是计算机广泛使用的<a href="https://so.csdn.net/so/search?q=%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">哈希算法</a>之一</p><p>MD5的固定长度为<strong>128比特，16字节</strong>，通常用他的<a href="https://so.csdn.net/so/search?q=16%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">16进制</a>字面值输出他，是一个<strong>长度为32位的字符串</strong>。</p></blockquote><h2 id="会话管理（分布式Session问题）"><a href="#会话管理（分布式Session问题）" class="headerlink" title="会话管理（分布式Session问题）"></a>会话管理（分布式Session问题）</h2><p>由于Http是无状态的，每次的http请求之间信息不共享，为了保证用户每次请求不用重新输入账号密码，保存用户的登录状态，就会有session和cookie这样的机制，去保存用户登录信息，但是在分布式部署的时候就会存在session共享的一个问题。</p><p>由于现在网站基本是多台服务器分布式部署的，如果<strong>将用户信息存到session中</strong>，而session是存到服务器上，在分布式环境下，由于各个服务器主机之间的信息并不共享，将用户信息存到服务器1上，同一个用户的下一个请求过来的时候，由于nginx的负载均衡策略，去请求了服务器2，就找不到之前的session了。下面介绍几种分布式Session问题的解决策略。</p><p><img src="https://img-blog.csdnimg.cn/20200122150313188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTkyNzIzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>粘性session：同一个ip分给同一个服务器，很难做负载均衡</p><p>同步Session：当一个服务器创建了session之后，会将该Session同步给其他服务器。服务器之间耦合，加大服务器之间的同步开销</p><p>Session服务器：专门一个服务器管理Session，这台服务器是单体的，万一挂掉，有安全隐患</p><p>将客户端会话数据不存到Session中而是存到数据库中：<br>关系型数据库性能较慢<br><strong>存到<code>redis</code>中（项目中采用的方式）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200122150324266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTkyNzIzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-aop记录日志"><a href="#Spring-aop记录日志" class="headerlink" title="Spring aop记录日志"></a>Spring aop记录日志</h3><p>aop实现对service层所有的业务方法记录日志</p><ul><li>Aop是一种编程思想，是对OOP的补充，可以进一步提升效率</li><li>Aop解决纵向切面的问题，主要实现日志和权限控制的功能</li><li>aspect实现切面，并且使用Logger来记录日志。用该切面的切面方法来监听controller</li><li>拦截器主要针对的是控制层controller</li></ul><h2 id="使用Redis实现点赞关注"><a href="#使用Redis实现点赞关注" class="headerlink" title="使用Redis实现点赞关注"></a>使用Redis实现点赞关注</h2><p>点赞和关注从功能上来说用传统的关系型数据库实现，但是其关系性并非很强，而且也是非常频繁的操作，用简单快速的Nosql也可以实现。</p><h3 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h3><ul><li>支持对帖子、评论点赞</li><li>第一次点赞，第2次取消点赞(判断userId在不在<strong>set集合</strong>中，就可以判断用户有否点过赞，如果已经点过赞了，就将用户从集合中删除)</li><li>在查询某人对某实体的点赞状态时，用可以用boolean作为返回值，但项目中使用int（支持业务扩展，可以支持是否点踩）</li></ul><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>like:entity:entityType:entityId</td><td>set(userId)</td></tr></tbody></table><p><strong>value使用set集合存放userId是为了能看对谁点了赞。</strong></p><h3 id="我收到的赞："><a href="#我收到的赞：" class="headerlink" title="我收到的赞："></a>我收到的赞：</h3><p>点赞时同样需要记录点赞实体的用户id</p><p>某个用户收到的赞</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>like:user:userId</td><td>int</td></tr></tbody></table><h3 id="关注、取消关注功能"><a href="#关注、取消关注功能" class="headerlink" title="关注、取消关注功能"></a>关注、取消关注功能</h3><p>使用Redis实现了每一个用户的粉丝列表，以及每一个用户的关注列表。</p><p><strong>由于关注成功以及添加粉丝成功需要在同一个事务中，<code>Redis</code>的事务主要是由multi与exec两个命令实现。</strong></p><p>关键点：</p><ul><li>A关注了B，则A是B的<code>Follwer</code>，B是A的<code>Followee</code>(目标）</li><li>关注的目标，可是用户、帖子、题目，在是现实将这些目标抽象为实体</li></ul><p><strong>某个用户关注的实体</strong></p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td><code>followee:userId:entityType</code></td><td><code>zset(entityId,now)</code></td></tr></tbody></table><p>使用<code>zset</code>以当前时间作为分数排序</p><p><strong>某个实体拥有的粉丝</strong></p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td><code>follower:entityType:entityId</code></td><td><code>zset(userId,now)</code></td></tr></tbody></table><h2 id="Kafka，实现异步消息系统"><a href="#Kafka，实现异步消息系统" class="headerlink" title="Kafka，实现异步消息系统"></a>Kafka，实现异步消息系统</h2><p>在项目中，会有一些<strong>不需要实时执行但是是非常频繁的操作或者任务</strong>，为了提升网站的性能，可以使用异步消息的形式进行发送，再次消息队列服务器kafka来实现。kafka的具体配置与使用可参考下文：</p><p><a href="https://blog.csdn.net/weixin_41927235/article/details/103036077">mac下消息队列服务器kafka（结合springboot）的配置与使用</a></p><h3 id="发送系统通知"><a href="#发送系统通知" class="headerlink" title="发送系统通知"></a>发送系统通知</h3><p>评论，点赞，关注等事件是非常频繁的操作，发送关系其的系统通知却并不是需要立刻执行的。主要实现分为下面几步：</p><ul><li><p>触发事件</p><ul><li>评论后，发布通知</li><li>点赞后，发布通知</li><li>关注后，发布通知</li></ul></li><li><p>处理事件</p><ul><li>封装事件对象（Event）</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> topic;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> userId;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> entityType;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> entityUserId;<br><span class="hljs-keyword">private</span> Map&lt;<span class="hljs-type">String</span>,object&gt; data;<br></code></pre></td></tr></table></figure><ul><li>开发事件的生产者 向特定的主题（评论，点赞，关注）发送事件</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-comment">//处理事件(发送事件)</span><br>public void fire<span class="hljs-constructor">Event(Event <span class="hljs-params">event</span>)</span>&#123;<br>   <span class="hljs-comment">//将事件发布到指定的主题</span><br>   kafkaTemplate.send(event.get<span class="hljs-constructor">Topic()</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONObject</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">JSONString(<span class="hljs-params">event</span>)</span>);<br>&#125;  <br></code></pre></td></tr></table></figure><ul><li>开发事件的消费者 使用@KafkaListener注解监听事件，如果监听成果并进行相应的处理，最后调用messageService添加到数据库中，下次用户显示消息列表的时候就可以看到系统消息了。</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">KafkaListener(<span class="hljs-params">topics</span> = &#123;TOPIC_COMMENT, TOPIC_LIKE, TOPIC_FOLLOW&#125;)</span><br>   public void handle<span class="hljs-constructor">CommentMessage(ConsumerRecord <span class="hljs-params">record</span>)</span> &#123;<br>       Event event = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONObject</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">record</span>.<span class="hljs-params">value</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Event</span>.</span></span><span class="hljs-keyword">class</span>);<br>      <br>       <span class="hljs-comment">//发送站内的通知</span><br>       Message message = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Message()</span>;<br>       message.set<span class="hljs-constructor">FromId(SYSTEM_USER_ID)</span>;<br>       message.set<span class="hljs-constructor">ToId(<span class="hljs-params">event</span>.<span class="hljs-params">getEntityUserId</span>()</span>);<br>       message.set<span class="hljs-constructor">ConversationId(<span class="hljs-params">event</span>.<span class="hljs-params">getTopic</span>()</span>);<span class="hljs-comment">//comment like follow</span><br>       message.set<span class="hljs-constructor">CreateTime(<span class="hljs-params">new</span> Date()</span>);<br>             <br>   message.set<span class="hljs-constructor">Content(JSONObject.<span class="hljs-params">toJSONString</span>(<span class="hljs-params">content</span>)</span>);<br><br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(content);<br>       <span class="hljs-comment">//调用messageService添加到数据库中</span><br>       messageService.add<span class="hljs-constructor">Message(<span class="hljs-params">message</span>)</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/d702b17a4e1471dce16e2c5d67b85beb0bad275d1f3c070dd7cd29a7f92b99f8/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303132323135303433363534312e706e673f782d6f73732d70726f636573733d696d6167652f77617465726d61726b2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304d546b794e7a497a4e513d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730"><img src="https://camo.githubusercontent.com/d702b17a4e1471dce16e2c5d67b85beb0bad275d1f3c070dd7cd29a7f92b99f8/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303132323135303433363534312e706e673f782d6f73732d70726f636573733d696d6167652f77617465726d61726b2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c33646c61586870626c38304d546b794e7a497a4e513d3d2c73697a655f31362c636f6c6f725f4646464646462c745f3730" alt="在这里插入图片描述"></a></p>]]></content>
    
    
    <categories>
      
      <category>开源项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hashmap源码</title>
    <link href="/2022/07/15/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/15/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap源码"><a href="#HashMap源码" class="headerlink" title="HashMap源码"></a>HashMap源码</h2><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>「键值对数量」</strong><br>在 HashMap 中，使用 size 来表示 HashMap 中键值对的数量。<br><strong>「扩容阈值」</strong><br>在 HashMap 中，使用 threshold 表示扩容的阈值，也就是 初始容量 * 负载因子的值。<br>size&gt;threshold，resize()</p><h3 id="jdk1-7和jdk1-8的区别"><a href="#jdk1-7和jdk1-8的区别" class="headerlink" title="jdk1.7和jdk1.8的区别"></a>jdk1.7和jdk1.8的区别</h3><ol><li>数据结构：首先是最重要的就是底层的数据结构，1.7的时候底层数据结构是数组+链表；而在1.8的时候变成了数组+链表+红黑树</li><li>Hash(key)的计算方式不同：在哈希上1.7扰动四次，1.8做了一次扰动（key.hashCode()) ^ (h &gt;&gt;&gt; 16)），扰动四次边际效用收益不大</li><li>扩容后数存储位置的计算方式不同：1.7在进行resize扩容的时候是重新哈希，1.8的时候采用的是<strong>索引位置不变</strong>或者就是就<strong>哈希表（oldCap)的容量+当前索引</strong>。(分成两个链表处理，详见resize())</li><li>链表的插入方式不同：1.7采用插入方式是头插法，1.8采用的是尾插法。</li><li>在插入时，1.7 先判断是否需要扩容，再插入，1.8 先进行插入，插入完成再判断是否需要扩容。</li></ol><h4 id="扩容-1-8-不用重新-hash-就可以直接定位原节点在新数据的位置呢？"><a href="#扩容-1-8-不用重新-hash-就可以直接定位原节点在新数据的位置呢？" class="headerlink" title="扩容 1.8 不用重新 hash 就可以直接定位原节点在新数据的位置呢？"></a>扩容 1.8 不用重新 hash 就可以直接定位原节点在新数据的位置呢？</h4><p>这是由于扩容是扩大为原数组大小的 2 倍，用于计算数组位置的掩码仅仅只是高位多了一个 1，举个例子：<br>扩容前长度为 16，用于计算 (n-1) &amp; hash 的二进制 n - 1 为 0000 1111，<br>扩容后为 32 后的二进制就高位多了 1，&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;为 0001 1111。<br>因为是 &amp; 运算，1 和任何数 &amp; 都是它本身，那就分二种情况，如下图：原数据 hashcode 高位第 4 位为 0 和高位为 1 的情况；第四位高位为 0，重新 hash 数值不变，第四位为 1，重新 hash 数值比原来大 16（旧数组的容量）。<img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657523671721-d01b47fe-5144-4d03-b162-c75ad0e54701.jpeg"></p><h4 id="1-7头插法多线程扩容，可能导致循环"><a href="#1-7头插法多线程扩容，可能导致循环" class="headerlink" title="1.7头插法多线程扩容，可能导致循环"></a>1.7头插法多线程扩容，可能导致循环</h4><p>因为 1.7 头插法扩容时，头插法会使链表发生反转，多线程环境下会产生环；A 线程在插入节点 B，B 线程也在插入，遇到容量不够开始扩容，重新 hash，放置元素，采用头插法，后遍历到的 B 节点放入了头部，这样形成了环，如下图所示：<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657523481649-38c6b012-9224-45eb-b2b6-b8ba88bf0afd.jpeg"></p><h3 id="构造函数中tableSizeFor"><a href="#构造函数中tableSizeFor" class="headerlink" title="构造函数中tableSizeFor()"></a>构造函数中tableSizeFor()</h3><p>保证传入的容量匹配到大于cap的2的n次方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>    <span class="hljs-comment">//最左边的一不断右移，并异或；使最左边的1的后面全部都变成1</span><br>    <span class="hljs-comment">//cap-1,避免cap=1&lt;&lt;30，MAXIMUM_CAPACITY时，不减一最后n+1溢出</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不减一 n=cap</span><br><span class="hljs-number">01</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> (n)   <br><span class="hljs-number">01</span> <span class="hljs-number">10000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> (n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>)    <br><span class="hljs-number">01</span> <span class="hljs-number">11100</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> (n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>)    <br><span class="hljs-number">01</span> <span class="hljs-number">11111</span> <span class="hljs-number">11000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> (n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>)    <br><span class="hljs-number">01</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> <span class="hljs-number">00000</span> (n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>)    <br><span class="hljs-number">01</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> <span class="hljs-number">11111</span> (n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>) <br><span class="hljs-comment">//n+1,溢出为负数</span><br></code></pre></td></tr></table></figure><h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h3><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657524419630-63465539-adc5-45a1-b0b8-54facf35e40d.jpeg"><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657522362563-36daa2c7-55bf-4c60-842a-8360386b6d17.jpeg"></p><h4 id="hash-函数中异或处理，高16位与低16位异或，这样i-x3D-n-1-amp-hash（取低位）时，可以减小哈希冲突的概率。"><a href="#hash-函数中异或处理，高16位与低16位异或，这样i-x3D-n-1-amp-hash（取低位）时，可以减小哈希冲突的概率。" class="headerlink" title="hash()函数中异或处理，高16位与低16位异或，这样i &#x3D; (n - 1) &amp; hash（取低位）时，可以减小哈希冲突的概率。"></a>hash()函数中异或处理，高16位与低16位异或，这样i &#x3D; (n - 1) &amp; hash（取低位）时，可以减小哈希冲突的概率。</h4><p>这样可以尽量保留高16位的特征，就算两个hashCode()返回值，低16位高度相同，异或后h的haminton距离也会较大。<br>为什么使用异或？减小哈希碰撞<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657524765436-fefcab72-59cd-49c2-8987-d6ed61749695.png"></p><h4 id="HashMap-是线程安全的吗？"><a href="#HashMap-是线程安全的吗？" class="headerlink" title="HashMap 是线程安全的吗？"></a>HashMap 是线程安全的吗？</h4><p> 不是，在多线程环境下，1.7 会产生死循环、数据丢失、数据覆盖的问题，1.8 中会有<strong>数据覆盖</strong>的问题。<br>以 1.8 为例，当 A 线程执行到下面代码第 6 行判断 index 位置为空后正好挂起，B 线程开始执行第 7 行，往 index 位置的写入节点数据，这时 A 线程恢复现场，执行赋值操作，就把 A 线程的数据给覆盖了。<br>还有第 38 行 ++size 这个地方也会造成多线程同时扩容等问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)  <span class="hljs-comment">//多线程执行到这里</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">// 多个线程走到这，可能重复resize()</span><br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="怎么解决这个线程不安全的问题？"><a href="#怎么解决这个线程不安全的问题？" class="headerlink" title="怎么解决这个线程不安全的问题？"></a>怎么解决这个线程不安全的问题？</h4><p> Java 中有 HashTable、Collections.synchronizedMap、以及 ConcurrentHashMap 可以实现线程安全的Map。</p><ol><li>HashTable 是直接在操作方法上加 synchronized 关键字，锁住整个数组，粒度比较大；</li><li>Collections.synchronizedMap 是使用 Collections 集合工具的内部类，通过传入 Map 封装出一个 SynchronizedMap 对象，内部定义了一个对象锁，方法内通过对象锁实现；</li><li>ConcurrentHashMap 使用分段锁，降低了锁粒度，让并发度大大提高。</li></ol><h3 id="resize-方法"><a href="#resize-方法" class="headerlink" title="resize()方法"></a>resize()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将集合扩容</span><br>         <span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>                 Node&lt;K,V&gt;[] oldTab = table;<br>                 <span class="hljs-comment">//旧表的容量</span><br>                 <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>                 <span class="hljs-comment">//之前的阈值</span><br>                 <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>                 <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>                 <span class="hljs-comment">//这里也可以说集合不为空</span><br>                 <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>                     <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="hljs-comment">//如果集合现在数组的长度大于等于最大容量</span><br>                         threshold = Integer.MAX_VALUE;<span class="hljs-comment">//将整型最大的值赋值给threshold</span><br>                         <span class="hljs-keyword">return</span> oldTab;<br>                     &#125;<br>                     <span class="hljs-comment">//当前集合数组长度扩大二倍赋值给newCap小于MAXIMUM_CAPACITY</span><br>                     <span class="hljs-comment">//并且集合的容量大于等于默认容量将当前阈值扩大二倍赋值给新的阈值 </span><br>                     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                              oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>                         newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>                 &#125;<br>                 <span class="hljs-comment">//若没有经历过初始化，通过构造函数指定了initialCapcity，将当前容量设置为大于它最小的2的n次方</span><br>                 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <br>                     newCap = oldThr;<br>                 <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// 初始的时候长度和阈值都使用默认值</span><br>                     newCap = DEFAULT_INITIAL_CAPACITY;<br>                     newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>                 &#125;<br>                 <span class="hljs-comment">//重新计算threshold</span><br>                 <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>                     <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>                     newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                               (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>                 &#125;<br>                 <span class="hljs-comment">//更新当前集合阈值</span><br>                 threshold = newThr;<br>                 <span class="hljs-comment">//从这里开始便是将oldTab数据重新hash放入扩容后的newTab</span><br>                 <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>                     Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>                 <span class="hljs-comment">//将table指向的oldTab指向newTab</span><br>                 table = newTab;<br>                 <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>                     <span class="hljs-comment">//遍历哈希表</span><br>                     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>                         Node&lt;K,V&gt; e;<br>                         <span class="hljs-comment">//当前链表是否为null、并且将就链表赋值给e</span><br>                         <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                             oldTab[j] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//将原来位置的链表置为null方便垃圾回收</span><br>                             <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<span class="hljs-comment">//链表的长度为1直接将链表中的一个节点重新hash存放到相应的位置</span><br>                                 newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                             <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//表示节点类型为树形结构</span><br>                                 ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                             <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//链表是非树形结构，并且节点数量是大于1</span><br>                                 <span class="hljs-comment">//将链表拆分为两个子链表</span><br>                                 Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                                 Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                                 Node&lt;K,V&gt; next;<br>                                 <span class="hljs-keyword">do</span> &#123;  <span class="hljs-comment">//通过do...while遍历链表</span><br>                                     next = e.next;<br>                                     <span class="hljs-comment">//e.hash &amp; oldCap 看这一位是1是0，分成两个链表处理</span><br>                                     <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                                         <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>) <span class="hljs-comment">//设置头节点</span><br>                                             loHead = e;<br>                                         <span class="hljs-keyword">else</span>            <span class="hljs-comment">//设置尾结点</span><br>                                             loTail.next = e;<br>                                         loTail = e;<span class="hljs-comment">//将尾结点变为最后一个节点</span><br>                                     &#125;<br>                                     <span class="hljs-keyword">else</span> &#123;<br>                                         <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<span class="hljs-comment">//同上都是设置头节点下面也一样是设置尾结点</span><br>                                             hiHead = e;<br>                                         <span class="hljs-keyword">else</span><br>                                             hiTail.next = e;<br>                                         hiTail = e;<br>                                     &#125;<br>                                 &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                                 <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//在新表的j位置存放链表</span><br>                                     loTail.next = <span class="hljs-literal">null</span>;<br>                                     newTab[j] = loHead;<br>                                 &#125;<br>                                 <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//在新表的j+oldCap位置存放链表</span><br>                                     hiTail.next = <span class="hljs-literal">null</span>;<br>                                     newTab[j + oldCap] = hiHead;<br>                                 &#125;<br>                             &#125;<br>                         &#125;<br>                     &#125;<br>                 &#125;<br>                 <span class="hljs-keyword">return</span> newTab;<br>             &#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedHashMap-怎么实现有序的？"><a href="#LinkedHashMap-怎么实现有序的？" class="headerlink" title="LinkedHashMap 怎么实现有序的？"></a>LinkedHashMap 怎么实现有序的？</h3><p>LinkedHashMap 内部维护了一个双向链表，有头尾节点，同时 LinkedHashMap 节点** Entry类 **内部除了继承 HashMap 的 Node 属性，还有 before  和  after 用于标识前置节点和后置节点。可以实现按插入的顺序或访问顺序排序。</p><h3 id="TreeMap-怎么实现有序的？"><a href="#TreeMap-怎么实现有序的？" class="headerlink" title="TreeMap 怎么实现有序的？"></a>TreeMap 怎么实现有序的？</h3><p>TreeMap实现 SortMap 接口， 按照 Key 的自然顺序或者 Comprator 的顺序进行排序，内部是通过红黑树来实现。所以要么 key 所属的类实现 Comparable 接口，或者自定义一个实现了 Comparator 接口的比较器，传给 TreeMap 用户 key 的比较。</p><h3 id="拉链法导致的链表过深问题为什么不用二叉查找树代替，而选择红黑树？为什么不一直使用红黑树？"><a href="#拉链法导致的链表过深问题为什么不用二叉查找树代替，而选择红黑树？为什么不一直使用红黑树？" class="headerlink" title="拉链法导致的链表过深问题为什么不用二叉查找树代替，而选择红黑树？为什么不一直使用红黑树？"></a>拉链法导致的链表过深问题为什么不用二叉查找树代替，而选择红黑树？为什么不一直使用红黑树？</h3><p>之所以选择红黑树是为了解决二叉查找树的缺陷，<strong>二叉查找树在特殊情况下会变成一条线性结构</strong>（这就跟原来使用链表结构一样了，造成很深的问题），遍历查找会非常慢。推荐：面试问红黑树，我脸都绿了。<br>而红黑树在插入新数据后可能需要通过<strong>左旋，右旋、变色这些操作来保持平衡(自平衡树）</strong>，引入红黑树就是为了查找数据快，解决链表查询深度的问题，我们知道红黑树属于平衡二叉树，但是为了保持“平衡”是需要付出代价的，但是该代价所损耗的资源要比遍历线性链表要少，所以当长度大于8的时候，会使用红黑树，如果链表长度很短的话，根本不需要引入红黑树，引入反而会慢。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>在 JDK 1.7 中采用 分段锁的方式；JDK 1.8 中直接采用了CAS（无锁算法）+ synchronized<br>HashMap 的键值对允许有null，但是ConCurrentHashMap 都不允许。</p><h3 id="JDK-1-7-中，采用分段锁的机制，实现并发的更新操作，底层采用数组-链表的存储结构，包括两个核心静态内部类-Segment-和-HashEntry。"><a href="#JDK-1-7-中，采用分段锁的机制，实现并发的更新操作，底层采用数组-链表的存储结构，包括两个核心静态内部类-Segment-和-HashEntry。" class="headerlink" title="JDK 1.7 中，采用分段锁的机制，实现并发的更新操作，底层采用数组+链表的存储结构，包括两个核心静态内部类 Segment 和 HashEntry。"></a>JDK 1.7 中，采用分段锁的机制，实现并发的更新操作，底层采用数组+链表的存储结构，包括两个核心静态内部类 Segment 和 HashEntry。</h3><p>①、Segment <strong>继承 ReentrantLock（重入锁）</strong> 用来充当锁的角色，每个 Segment 对象守护每个散列映射表的若干个桶；<br>②、HashEntry 用来封装映射表的键-值对；<br>③、每个桶是由若干个 HashEntry 对象链接起来的链表<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657525778462-e2d89c6d-7916-4d3b-9169-ff25a8d99d10.jpeg"></p><h3 id="JDK-1-8-中，采用Node-CAS-Synchronized来保证并发安全。"><a href="#JDK-1-8-中，采用Node-CAS-Synchronized来保证并发安全。" class="headerlink" title="JDK 1.8 中，采用Node + CAS + Synchronized来保证并发安全。"></a>JDK 1.8 中，采用Node + CAS + Synchronized来保证并发安全。</h3><p>取消类 Segment，直接用 table 数组存储键值对；当 HashEntry 对象组成的链表长度超过 TREEIFY_THRESHOLD 时，链表转换为红黑树，提升性能。底层变更为数组 + 链表 + 红黑树。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657525778553-66415109-b165-49a9-9f11-66797ed333b9.jpeg"></p><h4 id="存储对象时（put-方法）：："><a href="#存储对象时（put-方法）：：" class="headerlink" title="存储对象时（put() 方法）：："></a>存储对象时（put() 方法）：：</h4><p>如果没有初始化，就调用 initTable() 方法来进行初始化；<br>如果<strong>没有 hash 冲突</strong>就**直接 CAS **无锁插入；<br>如果需要扩容，就先进行扩容；<br>如果存在 hash 冲突，就加锁来保证线程安全，两种情况：一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入；<br>如果该链表的数量大于阀值 8，就要先转换成红黑树的结构，break 再一次进入循环<br>如果添加成功就调用 addCount() 方法统计 size，并且检查是否需要扩容。</p><h3 id="ConcurrentHashMap-在-JDK-1-8-中，为什么要使用内置锁-synchronized-来代替重入锁-ReentrantLock？"><a href="#ConcurrentHashMap-在-JDK-1-8-中，为什么要使用内置锁-synchronized-来代替重入锁-ReentrantLock？" class="headerlink" title="ConcurrentHashMap 在 JDK 1.8 中，为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock？"></a>ConcurrentHashMap 在 JDK 1.8 中，为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock？</h3><p>①、粒度降低了；<br>②、JVM 开发团队没有放弃 synchronized，而且基于 JVM 的 synchronized 优化空间更大，更加自然。<br>③、在大量的数据操作下，对于 JVM 的内存压力，基于 API 的 ReentrantLock 会开销更多的内存。 </p><h3 id="ConcurrentHashMap-的并发度是什么？"><a href="#ConcurrentHashMap-的并发度是什么？" class="headerlink" title="ConcurrentHashMap 的并发度是什么？"></a>ConcurrentHashMap 的并发度是什么？</h3><p>程序运行时能够同时更新 ConccurentHashMap 且不产生锁竞争的最大线程数。默认为 16，且可以在构造函数中设置。<br>当用户设置并发度时，ConcurrentHashMap 会使用大于等于该值的最小2幂指数作为实际并发度（假如用户设置并发度为17，实际并发度则为32）</p><h3 id="解决哈希冲突的方法"><a href="#解决哈希冲突的方法" class="headerlink" title="解决哈希冲突的方法"></a>解决哈希冲突的方法</h3><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657247489007-9f599b7f-bf8f-47c2-b65d-f31da18e4e29.jpeg"></p><h4 id="开放定址"><a href="#开放定址" class="headerlink" title="开放定址"></a>开放定址</h4><p>优点</p><ul><li>易序列化</li><li>若可预知数据总数，可以创建完美哈希数列</li></ul><p>缺点</p><ul><li>占空间很大。（开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间）</li><li>删除节点很麻烦。不能简单地将被删结点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1657246916507-ae42d924-009a-4ba5-b6c0-51be5359bff4.png#clientId=ue7be3c67-70ab-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uaeb9a9da&margin=%5Bobject%20Object%5D&name=image.png&originHeight=910&originWidth=1382&originalType=url&ratio=1&rotation=0&showTitle=false&size=71476&status=done&style=none&taskId=u8699ef62-98df-4df6-99f1-539e62e1c4a&title=" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>d可取线性，二次，随机数<br>(hash(key) <span class="hljs-operator">+</span> d) <span class="hljs-operator">%</span> table.length;<br>d <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">^</span><span class="hljs-number">2</span>, <span class="hljs-number">-1</span><span class="hljs-operator">^</span><span class="hljs-number">2</span>, <span class="hljs-number">2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span>, <span class="hljs-number">-2</span><span class="hljs-operator">^</span><span class="hljs-number">2</span>, <span class="hljs-number">3</span><span class="hljs-operator">^</span><span class="hljs-number">2.</span>.....<br></code></pre></td></tr></table></figure><h3 id="深拷贝和浅拷贝区别了解吗？什么是引用拷贝"><a href="#深拷贝和浅拷贝区别了解吗？什么是引用拷贝" class="headerlink" title="深拷贝和浅拷贝区别了解吗？什么是引用拷贝"></a>深拷贝和浅拷贝区别了解吗？什么是引用拷贝</h3><p>浅拷贝会在堆上复制一个新的对象，但是，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。（只复制引用，而不复制对象本身，新旧对象还是共享同一块内存）。<br>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657420195562-16f03c3a-9849-4af2-a41c-45af5b477671.png"><br>引用拷贝就是两个不同的引用指向同一个对象，直接赋值。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657419597052-6f00d72c-789c-4f32-ba3f-cba620fd9127.png"></p><h2 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h2><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657421348031-caca6275-308e-4534-bf7e-d27ca930aafe.png"><br><strong>Checked Exception</strong> 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 catch或者throws 关键字处理的话，就没办法通过编译。<br><strong>Unchecked Exception</strong> 即 <strong>不受检查异常</strong> ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。<br>RuntimeException 及其子类都统称为非受检查异常，常见的有（建议记下来，日常开发中会经常用到)：</p><ul><li>NullPointerException(空指针错误)</li><li>IllegalArgumentException(参数错误比如方法入参类型错误)</li><li>NumberFormatException（字符串转换为数字格式错误，IllegalArgumentException的子类）</li><li>ArrayIndexOutOfBoundsException（数组越界错误）</li><li>ClassCastException（类型转换错误）</li><li>ArithmeticException（算术错误）</li><li>SecurityException （安全错误比如权限不够）</li><li>UnsupportedOperationException(不支持的操作错误比如重复创建同一用户)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer30. 包含min函数的栈</title>
    <link href="/2022/07/15/30%E5%AE%9E%E7%8E%B0min%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2022/07/15/30%E5%AE%9E%E7%8E%B0min%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈"></a><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></h4><p>难度简单345</p><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><p><strong>示例:</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">MinStack minStack <span class="hljs-operator">=</span> new MinStack()<span class="hljs-comment">;</span><br>minStack.push(-<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br>minStack.push(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>minStack.push(-<span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>minStack.min()<span class="hljs-comment">;   --&gt; 返回 -3.</span><br>minStack.pop()<span class="hljs-comment">;</span><br>minStack.top()<span class="hljs-comment">;      --&gt; 返回 0.</span><br>minStack.min()<span class="hljs-comment">;   --&gt; 返回 -2.</span><br></code></pre></td></tr></table></figure><p> <strong>辅助栈</strong></p><p>同步维护一个状态，每push一个值，最小栈也要push一个当前最小值（维护一个状态）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    Stack&lt;Integer&gt; st;<br>    Stack&lt;Integer&gt; minState;<br>    <br><br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        st=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        minState=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        st.push(x);<br>        <span class="hljs-keyword">if</span>(minState.size()==<span class="hljs-number">0</span> || x &lt; minState.peek())&#123;<br>            minState.push(x);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            minState.push(minState.peek());<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(!st.isEmpty() &amp;&amp; !minState.isEmpty())&#123;<br>            st.pop();<br>            minState.pop();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(!st.isEmpty())&#123;<br>           <span class="hljs-keyword">return</span>  st.peek();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(!minState.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> minState.peek();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 29. 顺时针打印矩阵</title>
    <link href="/2022/07/15/29%20%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <url>/2022/07/15/29%20%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></h4><p>难度简单412</p><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：matrix = <span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[4,5,6]</span>,<span class="hljs-comment">[7,8,9]</span>]</span><br>输出：<span class="hljs-comment">[1,2,3,6,9,8,7,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：matrix = [[<span class="hljs-number">1,2,3,4</span>],[<span class="hljs-number">5,6,7,8</span>],[<span class="hljs-number">9,10,11,12</span>]]<br>输出：[<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">8,12,11,10</span>,<span class="hljs-number">9,5,6,7</span>]<br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><ul><li><code>0 &lt;= matrix.length &lt;= 100</code></li><li><code>0 &lt;= matrix[i].length &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span>[] res;<br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] spiralOrder(<span class="hljs-type">int</span>[][] matrix) &#123;<br>        <span class="hljs-keyword">if</span>(matrix==<span class="hljs-literal">null</span> || matrix.length==<span class="hljs-number">0</span> ||matrix[<span class="hljs-number">0</span>].length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>        &#125;<br>     <br>        <span class="hljs-type">int</span> m=matrix.length;<br>        <span class="hljs-type">int</span> n=matrix[<span class="hljs-number">0</span>].length;<br>        res=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m*n];<br>        <span class="hljs-type">int</span> startPoint=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//循环一圈（start=1），m和n减少start*2,作为是否还有格子剩下没打印的判断条件</span><br>        <span class="hljs-keyword">while</span>(m&gt;startPoint*<span class="hljs-number">2</span> &amp;&amp; n&gt;startPoint*<span class="hljs-number">2</span>)&#123;<br>            printCircle(matrix,startPoint,m,n);<br>            startPoint++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCircle</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> startPoint, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">//边界条件更改</span><br>        <span class="hljs-type">int</span> endX=m-<span class="hljs-number">1</span>-startPoint;<br>        <span class="hljs-type">int</span> endY=n-<span class="hljs-number">1</span>-startPoint;<br><br>        <span class="hljs-comment">//从左到右，这个如果进入，肯定会执行，因为至少有一个剩下了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startPoint; i &lt;=endY ; i++) &#123;<br>            res[index++]=matrix[startPoint][i];<br>        &#125;<br>        <span class="hljs-comment">//右边界，看有几行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startPoint+<span class="hljs-number">1</span>; i &lt;=endX ; i++) &#123;<br>            res[index++]=matrix[i][endY];<br>        &#125;<br>        <span class="hljs-comment">//下边界，也要看有几行，终止行号必须大于起始行号</span><br>        <span class="hljs-comment">//但是循环的是列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> endY-<span class="hljs-number">1</span>; (startPoint&lt;endX) &amp;&amp; (i &gt;=startPoint); i--) &#123;<br>            res[index++]=matrix[endX][i];<br>        &#125;<br>        <span class="hljs-comment">//左边界，终止列号必须大于起始列号</span><br>        <span class="hljs-comment">//但是控制循环的条件是行号</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> endX-<span class="hljs-number">1</span>; (startPoint&lt;endY) &amp;&amp;(i &gt;startPoint) ; i--) &#123;<br>            res[index++]=matrix[i][startPoint];<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 20. 表示数值的字符串</title>
    <link href="/2022/07/15/20%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E8%A7%A3%E4%B8%BA%E5%AD%97%E7%AC%A6/"/>
    <url>/2022/07/15/20%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E8%A7%A3%E4%B8%BA%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-20-表示数值的字符串"><a href="#剑指-Offer-20-表示数值的字符串" class="headerlink" title="剑指 Offer 20. 表示数值的字符串"></a><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">剑指 Offer 20. 表示数值的字符串</a></h4><p>难度中等341</p><p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p><p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p><ol><li>若干空格——<code>子函数space()</code></li><li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li><li>（可选）一个 <code>&#39;e&#39;</code> 或 <code>&#39;E&#39;</code> ，后面跟着一个 <strong>整数</strong></li><li>若干空格</li></ol><p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p><ol><li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）—<code>子函数unsignedInteger()</code></li><li>下述格式之一：<ol><li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code></li><li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code> ，后面再跟着至少一位数字</li><li>一个点 <code>&#39;.&#39;</code> ，后面跟着至少一位数字</li></ol></li></ol><p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p><ol><li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）</li><li>至少一位数字</li></ol><p>部分<strong>数值</strong>列举如下：</p><ul><li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code></li></ul><p>部分<strong>非数值</strong>列举如下：</p><ul><li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li></ul><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;0&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;e&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;.&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;    .1  &quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>s</code> 仅含英文字母（大写和小写），数字（<code>0-9</code>），加号 <code>&#39;+&#39;</code> ，减号 <code>&#39;-&#39;</code> ，空格 <code>&#39; &#39;</code> 或者点 <code>&#39;.&#39;</code> 。</li></ul><p>数值可以拆分为三个部分：</p><p>整数部分A，小数部分B，指数部分C(1e-16,1e16)。</p><p><strong>先扫描A，再扫描B, 再扫描C</strong>。返回组合的条件。（B||A  ,  (B||A)&amp;&amp;C）</p><p>特殊的处理只包括 “.”和‘e’ , 模式最基础的部分是整数的扫描，分别为带符号的整数(A,C) 和不带符号的整数（B）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        i=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//空格处理</span><br>        space(s);<br><br>        <span class="hljs-comment">//处理带符号整数</span><br>        <span class="hljs-type">boolean</span> num=isInteger(s);<br><br>            <span class="hljs-comment">//扫描完小数</span><br>            <span class="hljs-keyword">if</span> (i&lt; s.length() &amp;&amp;s.charAt(i) == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                i++;<br>                <span class="hljs-comment">//条件为或，可以不存在带符号整数（.12）,小数点后可以没有无符号整数（12.）</span><br>                <span class="hljs-comment">//isUsignedInteger要写在前面，防止被短路，i没有扫描到最后一位</span><br>                num = isUsignedInteger(s)||num;<br>            &#125;<br>            <span class="hljs-comment">//不能用else if，因为e前面也有可能是小数（46.e3）</span><br>            <span class="hljs-comment">//处理指数部分</span><br>            <span class="hljs-comment">//带符号整数 + e + 无符号整数</span><br>            <span class="hljs-keyword">if</span> (i&lt; s.length() &amp;&amp;s.charAt(i) == <span class="hljs-string">&#x27;e&#x27;</span> || s.charAt(i) == <span class="hljs-string">&#x27;E&#x27;</span>) &#123;<br>                i++;<br>                num = num &amp;&amp; isInteger(s);<br>            &#125;<br><br>        space(s);<br>        <span class="hljs-keyword">return</span> num &amp;&amp; i == s.length();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">space</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">while</span>(i&lt; s.length() &amp;&amp; s.charAt(i)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            i++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInteger</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span>(i&lt; s.length()&amp;&amp; (s.charAt(i)==<span class="hljs-string">&#x27;+&#x27;</span> || s.charAt(i)==<span class="hljs-string">&#x27;-&#x27;</span>))&#123;<br>            i++;<br>        &#125;<br>       <span class="hljs-keyword">return</span>  isUsignedInteger(s);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 至少一位整数数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isUsignedInteger</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> tmp=i;<br>        <span class="hljs-keyword">while</span>(i&lt;s.length() &amp;&amp; (s.charAt(i)&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) &amp;&amp; (s.charAt(i)&gt;=<span class="hljs-string">&#x27;0&#x27;</span>))&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i&gt;tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 19. 正则表达式匹配</title>
    <link href="/2022/07/15/19%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <url>/2022/07/15/19%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-19-正则表达式匹配"><a href="#剑指-Offer-19-正则表达式匹配" class="headerlink" title="剑指 Offer 19. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/">剑指 Offer 19. 正则表达式匹配</a></h4><p>难度困难404</p><p>请实现一个函数用来匹配包含<code>&#39;. &#39;</code>和<code>&#39;*&#39;</code>的正则表达式。模式中的字符<code>&#39;.&#39;</code>表示任意一个字符，而<code>&#39;*&#39;</code>表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串<code>&quot;aaa&quot;</code>与模式<code>&quot;a.a&quot;</code>和<code>&quot;ab*ac*a&quot;</code>匹配，但与<code>&quot;aa.a&quot;</code>和<code>&quot;ab*a&quot;</code>均不匹配。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入:</span><br>s = <span class="hljs-string">&quot;aa&quot;</span><br>p = <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-section">输出: false</span><br><span class="hljs-section">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></code></pre></td></tr></table></figure><p><strong>思路</strong>：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态规划，依赖于子问题的解决</span><br><span class="hljs-comment"> * 使用正则表达式 p 消耗字符串 s</span><br><span class="hljs-comment"> * 当 p是 “*”时，三种情况</span><br><span class="hljs-comment"> * 1.(匹配）消耗0个字符,j损失两个 (i-0,j-2)   dp[i][j]=dp[i][j-2]</span><br><span class="hljs-comment"> * 2.消耗1个字符，j不变(*可以留下来多消耗0个或者几个字符）  (i-1,j)  dp[i][j]=dp[i-1][j] &amp;&amp; s.charAt(i-1)==p.charAt(j-2)</span><br><span class="hljs-comment"> * 3.消耗一个字符，j不变   dp[i][j]=dp[i-1][j]&amp;&amp;p.charAt(j-2)==&#x27;.&#x27;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 当p不是“*”时，两种情况</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> huzhifei</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String s, String p)</span> &#123;<br>        <span class="hljs-type">int</span> m=s.length();<br>        <span class="hljs-type">int</span> n=p.length();<br><br>        <span class="hljs-type">boolean</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//初始化，s的长度为0的情况</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//s没有字符可以消耗，使用于 情况一才会有，true出现（从0开始，j取偶数，有true的可能）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;=n ; j+=<span class="hljs-number">2</span>) &#123;<br>          dp[<span class="hljs-number">0</span>][j]=dp[<span class="hljs-number">0</span>][j-<span class="hljs-number">2</span>]&amp;&amp;p.charAt(j-<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;m+<span class="hljs-number">1</span> ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;n+<span class="hljs-number">1</span> ; j++) &#123;<br>                <span class="hljs-keyword">if</span>(p.charAt(j-<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                    dp[i][j]=dp[i][j-<span class="hljs-number">2</span>]||(s.charAt(i-<span class="hljs-number">1</span>)==p.charAt(j-<span class="hljs-number">2</span>)&amp;&amp; dp[i-<span class="hljs-number">1</span>][j])<br>                            || (dp[i-<span class="hljs-number">1</span>][j]&amp;&amp;p.charAt(j-<span class="hljs-number">2</span>)==<span class="hljs-string">&#x27;.&#x27;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    dp[i][j]=(s.charAt(i-<span class="hljs-number">1</span>)==p.charAt(j-<span class="hljs-number">1</span>) &amp;&amp; dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>])<br>                            ||(dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] &amp;&amp; p.charAt(j-<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;.&#x27;</span>);<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 17. 打印从1到最大的n位数</title>
    <link href="/2022/07/15/17%20%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
    <url>/2022/07/15/17%20%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-17-打印从1到最大的n位数"><a href="#剑指-Offer-17-打印从1到最大的n位数" class="headerlink" title="剑指 Offer 17. 打印从1到最大的n位数"></a><a href="https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">剑指 Offer 17. 打印从1到最大的n位数</a></h4><p>难度简单227</p><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: n = <span class="hljs-number">1</span><br>输出: [<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5,6,7,8</span>,<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>用返回一个整数列表来代替打印</li><li>n 为正整数</li></ul><p><strong>考虑大数问题，使用字符串模拟，并转换为全排列问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;String&gt; res;<br>    StringBuilder cur;<br><br>    <span class="hljs-type">char</span>[] NUM = &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] printNumbers(<span class="hljs-type">int</span> n) &#123;<br>       <br>        res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cur=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            dfs(<span class="hljs-number">0</span>,i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res.stream().mapToInt(a-&gt;Integer.parseInt(a)).toArray();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成长度为len的字符串，0&lt;len&lt;=n</span><br><span class="hljs-comment">     * x为当前位数，x&lt;=len</span><br><span class="hljs-comment">     * x==0时(从左到右），num[i]从1开始循环</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">if</span>(x == len) &#123;<br>            res.add(cur.toString());<br>            <span class="hljs-keyword">return</span>;<br><br>        &#125;<br>        <span class="hljs-comment">// X=0表示左边第一位数字，不能为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> x==<span class="hljs-number">0</span>? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=start; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">// 确定本位数字</span><br>            cur.append(NUM[i]);<br>            <span class="hljs-comment">// 确定下一位数字</span><br>            dfs(x+<span class="hljs-number">1</span>, len);<br>            <span class="hljs-comment">// 删除本位数字</span><br>            cur.deleteCharAt(cur.length()-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 16. 数值的整数次方</title>
    <link href="/2022/07/15/16%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <url>/2022/07/15/16%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a></h4><p>难度中等303</p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：x = <span class="hljs-number">2.00000</span>, n = <span class="hljs-number">10</span><br>输出：<span class="hljs-number">1024.00000</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：x = <span class="hljs-number">2.10000</span>, n = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">9.26100</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">输入：x = <span class="hljs-number">2.00000</span>, n = -<span class="hljs-number">2</span><br>输出：<span class="hljs-number">0.25000</span><br>解释：<span class="hljs-number">2</span>-<span class="hljs-number">2</span> = <span class="hljs-number">1</span><span class="hljs-regexp">/22 = 1/</span><span class="hljs-number">4</span> = <span class="hljs-number">0.25</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li><code>-231 &lt;= n &lt;= 231-1</code></li><li><code>-104 &lt;= xn &lt;= 104</code></li></ul><p>递归：</p><p><code>TC=SC=O(logn)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java 代码中 int32 变量 n∈[−2147483648,2147483647] ，</span><br><span class="hljs-comment"> * 因此当 n = -2147483648n=−2147483648 时执行 n = -n会因越界而赋值出错。</span><br><span class="hljs-comment"> * 解决方法是先将 n 存入 long 变量 b ，后面用 b 操作即可。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> b=n;<br><br>        <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br>            x=<span class="hljs-number">1</span>/x;<br>            b=-b;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> helper(x,b);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">helper</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-type">double</span> result=helper(x,n&gt;&gt;<span class="hljs-number">1</span>);<br>        result*=result;<br>        <span class="hljs-keyword">if</span>((n&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<br>            result*=x;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>迭代：</p><p><code>TC:O(logn)</code></p><p><code> SC:O(1)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java 代码中 int32 变量 n∈[−2147483648,2147483647] ，</span><br><span class="hljs-comment"> * 因此当 n = -2147483648n=−2147483648 时执行 n = -n会因越界而赋值出错。</span><br><span class="hljs-comment"> * 解决方法是先将 n 存入 long 变量 b ，后面用 b 操作即可。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> b=n;<br>        <span class="hljs-type">double</span> ans=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>)&#123;<br>            x=<span class="hljs-number">1</span>/x;<br>            b=-b;<br>        &#125;<br>      <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">if</span>((b&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<br>              ans*=x;<br>          &#125;<br>          <span class="hljs-comment">//x^n==(x^2)^(n/2)</span><br>          x=x*x;<br>          b=b&gt;&gt;<span class="hljs-number">1</span>;<br>      &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 15. 二进制中1的个数</title>
    <link href="/2022/07/15/15%20%E4%BA%8C%E8%BF%9B%E5%88%B61%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2022/07/15/15%20%E4%BA%8C%E8%BF%9B%E5%88%B61%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a></h4><p>难度简单250</p><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 <a href="http://en.wikipedia.org/wiki/Hamming_weight">汉明重量</a>).）。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用 <a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a> 记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n =<span class="hljs-number"> 11 </span>(控制台输入 00000000000000000000000000001011)<br>输出：3<br>解释：输入的二进制串<span class="hljs-number"> 00000000000000000000000000001011 </span>中，共有三位为 &#x27;1&#x27;。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n =<span class="hljs-number"> 128 </span>(控制台输入 00000000000000000000000010000000)<br>输出：1<br>解释：输入的二进制串<span class="hljs-number"> 00000000000000000000000010000000 </span>中，共有一位为 &#x27;1&#x27;。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n =<span class="hljs-number"> 4294967293 </span>(控制台输入 11111111111111111111111111111101，部分语言中 n = -3）<br>输出：31<br>解释：输入的二进制串<span class="hljs-number"> 11111111111111111111111111111101 </span>中，共有<span class="hljs-number"> 31 </span>位为 &#x27;1&#x27;。<br></code></pre></td></tr></table></figure><p>TC:<code>O(log2n)</code>&lt;32</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// you need to treat n as an unsigned value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">0</span>)&#123;<br>            ans+=n&amp;<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//逻辑右移，无符号右移</span><br>            n=n&gt;&gt;&gt;<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TC:<code>O(ans)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (n−1) 解析： 二进制数字 n 最右边的 1 变成 0 </span><br><span class="hljs-comment"> * n&amp;(n−1) 解析：消灭一个最右边的1</span><br><span class="hljs-comment"> * eg. n=1110, n-1=1101,n(n-1)=1100,不涉及符号位，即左右移事项</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// you need to treat n as an unsigned value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">0</span>)&#123;<br>            ans++;<br>            n=n&amp;(n-<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 14- I. 剪绳子</title>
    <link href="/2022/07/15/14%20%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <url>/2022/07/15/14%20%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-14-I-剪绳子"><a href="#剑指-Offer-14-I-剪绳子" class="headerlink" title="剑指 Offer 14- I. 剪绳子"></a><a href="https://leetcode.cn/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></h4><p>难度中等431</p><p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: 2<br>输出: 1<br>解释:<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 1 </span>+ 1,<span class="hljs-number"> 1 </span>×<span class="hljs-number"> 1 </span>= 1<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: 10<br>输出: 36<br>解释:<span class="hljs-number"> 10 </span>=<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 3 </span>+ 4,<span class="hljs-number"> 3 </span>×<span class="hljs-number"> 3 </span>×<span class="hljs-number"> 4 </span>= 36<br></code></pre></td></tr></table></figure><p>动态规划：</p><ul><li><p>从上到下分析问题，f(n)问题分解为f(n-i)和f(i)问题（0&lt;i&lt;n)，这两个都取到最优解，则f(n)也是最优解；</p></li><li><p>从下到上解决问题，f(n),f(n-1)存在重复子问题，所以从下到上计算，并储存子问题答案</p></li></ul><p>状态转移方程：</p><p><code>f(n)=max(f(n-i)*f(i))</code></p><p>TC：<code>O(n^2)</code></p><p>SC：<code>O(n)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cuttingRope</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <br>        <span class="hljs-comment">//小于等于3的时候，不剪取到最大值</span><br>        dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//2&gt;1</span><br>        dp[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//3&gt;2</span><br>        dp[<span class="hljs-number">3</span>]=<span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &lt; n + <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i/<span class="hljs-number">2</span>; j++) &#123;<br>                dp[i]=Math.max(dp[i],dp[i-j]*dp[j]);<br>            &#125;<br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dp[n];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>贪心：</p><p>TC &amp; SC：<code>O(1)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 贪心，每一步最优</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//当绳子大于等于5时</span><br>    <span class="hljs-comment">//3(n-3)&gt;n,2(n-2)&gt;n所以要剪</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cuttingRope</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> timeOf3=n/<span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (Math.pow(<span class="hljs-number">3</span>,timeOf3-<span class="hljs-number">1</span>)*<span class="hljs-number">4</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%<span class="hljs-number">3</span>==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (Math.pow(<span class="hljs-number">3</span>,timeOf3)*<span class="hljs-number">2</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) Math.pow(<span class="hljs-number">3</span>,timeOf3);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>贪心取余</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//4没必要分，2，3不可再分，结果会变小</span><br>    <span class="hljs-comment">//当绳子大于等于5时</span><br>    <span class="hljs-comment">//3(n-3)&gt;n,2(n-2)&gt;n所以要剪，且3(n-3)&gt;2(n-2)，2，3为不可切分的单元。</span><br>    <span class="hljs-comment">//如果n-3大于等于5,继续切分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cuttingRope</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">3</span>)&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;<br><br>      <span class="hljs-type">long</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//4没必要分，2，3不可再分，会变小</span><br>     <span class="hljs-keyword">while</span> (n&gt;<span class="hljs-number">4</span>)&#123;<br>         res= (<span class="hljs-type">long</span>) ((res*<span class="hljs-number">3</span>)%(<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>));<br>         n-=<span class="hljs-number">3</span>;<br>     &#125;<br>     <span class="hljs-comment">//n取&#123;4(余数为1的情况)，3，2&#125;</span><br>     <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (n*res%(<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 12. 矩阵中的路径</title>
    <link href="/2022/07/15/12%E7%9F%A9%E9%98%B5%E8%B7%AF%E5%BE%84/"/>
    <url>/2022/07/15/12%E7%9F%A9%E9%98%B5%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">剑指 Offer 12. 矩阵中的路径</a></h4><p>难度中等593</p><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="img"></p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>],[<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>],[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>]], word = <span class="hljs-string">&quot;ABCCED&quot;</span><br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>],[<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]], word = <span class="hljs-string">&quot;abcd&quot;</span><br>输出：false<br></code></pre></td></tr></table></figure><p>和79题一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">boolean</span>[][] visited;<br>    <span class="hljs-type">boolean</span> flag;<br>    <span class="hljs-type">int</span>[] direction=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exist</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, String word)</span> &#123;<br>        visited=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[board.length][board[<span class="hljs-number">0</span>].length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(board[i][j]==word.charAt(<span class="hljs-number">0</span>))&#123;<br>                    dfs(board,word,<span class="hljs-number">0</span>,i,j);<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, String word, <span class="hljs-type">int</span> level,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-comment">//flag是必要剪枝条的一步，不然超时</span><br>        <span class="hljs-comment">//dfs搜索到之后在回溯的时候，剪枝</span><br>        <span class="hljs-comment">//因为dfs返回值为空，会搜索整颗树</span><br>        <span class="hljs-keyword">if</span>(level==word.length() || flag)&#123;<br>            flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span> || j&lt;<span class="hljs-number">0</span> || i&gt;=board.length || j&gt;=board[<span class="hljs-number">0</span>].length || board[i][j]!=word.charAt(level) || visited[i][j])&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><span class="hljs-comment">//第n个字符</span><br>        visited[i][j]=<span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">//搜索n+1个字符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>            <span class="hljs-type">int</span> x=i+ direction[k];<br>            <span class="hljs-type">int</span> y=j+ direction[k+<span class="hljs-number">1</span>];<br>            dfs(board,word,level+<span class="hljs-number">1</span>,x,y);<br><br>        &#125;<br>        <span class="hljs-comment">//没有找到n+1个字符((n+1)没有被标记)，取消第n个字符，回退到n-1个字符</span><br>        visited[i][j]=<span class="hljs-literal">false</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">boolean</span>[][] visited;<br>  <span class="hljs-comment">//  int[] direction=new int[]&#123;-1,0,1,0,-1&#125;;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exist</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, String word)</span> &#123;<br>        visited=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[board.length][board[<span class="hljs-number">0</span>].length];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(dfs(board,word,<span class="hljs-number">0</span>,i,j))&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, String word, <span class="hljs-type">int</span> level,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span>(level==word.length())&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span> || j&lt;<span class="hljs-number">0</span> || i&gt;=board.length || j&gt;=board[<span class="hljs-number">0</span>].length || board[i][j]!=word.charAt(level) || visited[i][j])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br><br>        visited[i][j]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>            <span class="hljs-type">int</span> x<br>        &#125;<br><br>            <span class="hljs-type">boolean</span> flag=dfs(board,word,level+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>,j)||dfs(board,word,level+<span class="hljs-number">1</span>,i-<span class="hljs-number">1</span>,j)||<br>                    dfs(board,word,level+<span class="hljs-number">1</span>,i,j-<span class="hljs-number">1</span>)|| dfs(board,word,level+<span class="hljs-number">1</span>,i,j+<span class="hljs-number">1</span>);<br><br>      <span class="hljs-keyword">if</span>(!flag)&#123;<br>          visited[i][j]=<span class="hljs-literal">false</span>;<br>      &#125;<br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 03. 数组中重复的数字</title>
    <link href="/2022/07/15/03%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%80%BC/"/>
    <url>/2022/07/15/03%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h4><p>难度简单838</p><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：<br><span class="hljs-string">[2, 3, 1, 0, 2, 5, 3]</span><br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原地哈希</span><br><span class="hljs-comment"> * 数据在[0,n-1]之间，所以排序后，i==nums[i]</span><br><span class="hljs-comment"> * 把nums[i]放在i这个位置，如果出现哈希冲突就是重复的值</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">//因为交换一次后有很大可能还是不等 nums[i] i</span><br>            <span class="hljs-comment">//继续交换，i不能++</span><br>            <span class="hljs-keyword">while</span> (nums[i]!=i)&#123;<br>                <span class="hljs-comment">//哈希冲突</span><br>                <span class="hljs-keyword">if</span>(nums[i]==nums[nums[i]])&#123;<br>                    <span class="hljs-keyword">return</span> nums[i];<br>                &#125;<br>                swap(nums,i);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">int</span> tmp=nums[i];<br>        nums[i]=nums[nums[i]];<br>        nums[nums[i]]=tmp;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 31. 栈的压入、弹出序列</title>
    <link href="/2022/07/15/31%20%E5%87%BA%E5%85%A5%E6%A0%88%E6%A8%A1%E6%8B%9F/"/>
    <url>/2022/07/15/31%20%E5%87%BA%E5%85%A5%E6%A0%88%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-31-栈的压入、弹出序列"><a href="#剑指-Offer-31-栈的压入、弹出序列" class="headerlink" title="剑指 Offer 31. 栈的压入、弹出序列"></a><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指 Offer 31. 栈的压入、弹出序列</a></h4><p>难度中等335</p><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：pushed = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], popped = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：我们可以按以下顺序执行：<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">4</span>,<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">5</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">3</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">2</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：pushed = <span class="hljs-string">[1,2,3,4,5]</span>, popped = <span class="hljs-string">[4,3,5,1,2]</span><br>输出：false<br>解释：<span class="hljs-number">1</span> 不能在 <span class="hljs-number">2</span> 之前弹出。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li><li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li><li><code>pushed</code> 是 <code>popped</code> 的排列。</li></ol><p><strong>思路</strong>：建立辅助栈模拟入栈和出栈过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateStackSequences</span><span class="hljs-params">(<span class="hljs-type">int</span>[] pushed, <span class="hljs-type">int</span>[] popped)</span> &#123;<br>        ArrayDeque&lt;Integer&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">PopIndex</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:pushed)&#123;<br>            <span class="hljs-comment">//一直使用Pushed[]入栈，保持顺序</span><br>            st.push(num);<br>            <span class="hljs-comment">//st.peek()和Popped[i]相同，一直出栈</span><br>            <span class="hljs-comment">//不能写num,因为栈顶一直在变化</span><br>            <span class="hljs-keyword">while</span>(!st.isEmpty() &amp;&amp; st.peek()==popped[PopIndex] )&#123;<br>                st.pop();<br>                PopIndex++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//栈为空，则说明按照popped[]可以实现</span><br>        <span class="hljs-keyword">return</span> st.isEmpty();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>剑指 Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM总结</title>
    <link href="/2022/07/15/JVM/"/>
    <url>/2022/07/15/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h1><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/ZJb2WyxYaflq34U.png"><br>线程共享区域：方法区和堆。<br>方法区：1.8之前由永久代实现，1.8之后放入本地内存（物理内存中元空间），逻辑概念。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656236027926-63b17342-b830-4414-8da6-b5e1207a98be.png"><br><img src="https://s2.loli.net/2022/04/27/fu26diPaLvIsKqc.png#crop=0&crop=0&crop=1&crop=1&id=SGLJp&originHeight=541&originWidth=1324&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><strong>为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</strong></p><ol><li><strong>永久代有一个默认的大小，能够加载的类有限，容易OOＭ，也不太好调优。</strong></li><li>在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</li></ol><p>堆：</p><ol><li>对象</li><li>Stringtable, 类变量（static修饰静态变量）——1.7逐步去永久代，从方法区换到堆。</li></ol><p>堆的大小可通过参数**-Xmx<strong>和</strong>-Xms**设定。<br><img src="https://s2.loli.net/2022/04/27/W8kRQ9AYSXcaDLu.png#crop=0&crop=0&crop=1&crop=1&id=LFkFY&originHeight=668&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>线程私有：<br>栈：一个方法对应一个栈帧。包含本地变量表，操作数栈，动态链接（指向运行时常量池)。</p><p>程序计数器：</p><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>Java 对象的创建过程我建议最好是能默写出来，并且要掌握每一步在做什么。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656241732688-842f820b-051f-4b87-9390-e1579830e2e1.png" alt="image.png"></p><h4 id="Step1-类加载检查"><a href="#Step1-类加载检查" class="headerlink" title="#Step1:类加载检查"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#step1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%A3%80%E6%9F%A5">#</a>Step1:类加载检查</h4><p>一个类只加载一次，先检查当前类有没有被加载过。</p><h4 id="Step2-分配内存"><a href="#Step2-分配内存" class="headerlink" title="#Step2:分配内存"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#step2-%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98">#</a>Step2:分配内存</h4><p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。<br><strong>内存分配的两种方式</strong> （补充内容，需要掌握）：</p><ul><li>指针碰撞 ：<ul><li>适用场合 ：堆内存规整（即没有内存碎片）的情况下。</li><li>原理 ：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个<strong>分界指针</strong>，只需要向着没用过的内存方向<strong>将该指针移动</strong>对象内存大小位置即可。</li><li>使用该分配方式的 GC 收集器：Serial, ParNew(新生代标记复制算法）</li></ul></li><li>空闲列表 ：<ul><li>适用场合 ： 堆内存不规整的情况下。</li><li>原理 ：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。</li><li>使用该分配方式的 GC 收集器：CMS（老年代唯一标记清理算法，会产生很多内存碎片）</li></ul></li></ul><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的。<br><strong>内存分配并发问题（补充内容，需要掌握）</strong><br>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li><strong>TLAB：</strong> <strong>本地线程分配缓冲</strong>（Thread Local Allocation Buffer)，为每一个线程<strong>预先在 Eden 区分配一块儿内存</strong>。通过-XX:+&#x2F;-UseTLAB参数来设定虚拟机是否使用TLAB（JVM默认会开启-XX:+&#x2F;-UseTLAB），-XX:TLABSize指定TLAB大小。首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</li><li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li></ul><h4 id="Step3-初始化零值"><a href="#Step3-初始化零值" class="headerlink" title="#Step3:初始化零值"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#step3-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9B%B6%E5%80%BC">#</a>Step3:初始化零值</h4><p>内存分配完成后，虚拟机需要将分配到的<strong>内存空间都初始化为零值</strong>（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以<strong>不赋初始值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。</p><h4 id="Step4-设置对象头"><a href="#Step4-设置对象头" class="headerlink" title="#Step4:设置对象头"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#step4-%E8%AE%BE%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%A4%B4">#</a>Step4:设置对象头</h4><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656241674976-4db95c48-f64e-4bfc-99e7-c3d21425a110.png" alt="image.png"></p><h4 id="Step5-执行-init-方法——构造方法"><a href="#Step5-执行-init-方法——构造方法" class="headerlink" title="#Step5:执行 init 方法——构造方法"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#step5-%E6%89%A7%E8%A1%8C-init-%E6%96%B9%E6%B3%95">#</a>Step5:执行 init 方法——构造方法</h4><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="#对象的内存布局"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80">#</a>对象的内存布局</h3><table><thead><tr><th><strong>信息</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>哈希码</td><td>HashCode</td></tr><tr><td>GC分代年龄</td><td>经历了多少次GC</td></tr><tr><td>锁状态标志</td><td>synchronized的标志</td></tr><tr><td>偏向线程ID</td><td>偏向锁偏向的线程ID</td></tr><tr><td>偏向时间戳</td><td>偏向的时间</td></tr><tr><td>数组大小</td><td><strong>默认是4字节</strong></td></tr><tr><td>类型指针</td><td></td></tr><tr><td>Klass Pointer</td><td>指向的<strong>类元数据</strong>的指针 【<strong>方法区</strong>】</td></tr><tr><td>指针压缩的作用点</td><td></td></tr></tbody></table><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。<br><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。<br><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对<strong>象实例数据部分没有对齐</strong>时，就需要通过对齐填充来补全。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="#对象的访问定位"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D">#</a>对象的访问定位</h3><p>建立对象就是为了使用对象，我们的 Java 程序通过<strong>栈上的 reference 数据</strong>来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有：<strong>使用句柄</strong>、<strong>直接指针</strong>。</p><h4 id="句柄"><a href="#句柄" class="headerlink" title="#句柄"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#%E5%8F%A5%E6%9F%84">#</a>句柄</h4><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656236892249-727aaafb-4305-4551-b7fe-c51863a5911a.png#clientId=udb9bcaa0-62b5-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ude609864&originHeight=712&originWidth=1498&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u64923f1d-8249-41e1-acbb-3770059666d&title="></p><h4 id="直接指针"><a href="#直接指针" class="headerlink" title="#直接指针"></a><a href="https://javaguide.cn/java/jvm/memory-area.html#%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88">#</a>直接指针</h4><p>如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656236892428-849a4495-1de8-40fd-a172-e8ee5fd3f1b2.png#clientId=udb9bcaa0-62b5-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ufeb74473&originHeight=712&originWidth=1568&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u5b424030-afe9-468c-9f62-a4fde08d64b&title="><br>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时<strong>只会改变句柄中的实例数据指针</strong>，而 <strong>reference 本身不需要修改</strong>。使用直接指针访问方式最大的好处就是<strong>速度快</strong>，它节省了一次指针定位的时间开销。</p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656256640010-e4d760af-169f-4c8d-9418-eda59f3cd052.png"></p><h3 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h3><ol><li>通过全类名获取获取二进制字节流；</li><li>将字节流转化为数据结构保存到方法区；</li><li>在<strong>Java堆</strong>中产生 java.lang.Class对象。Class对象是可以方法区的访问入口，用于Java反射机制，获取类的各种信息。</li></ol><p>加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。</p><h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p>验证：文件格式是否合法；<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656256962561-bc652af1-b8eb-44cf-8d68-10f94fc138ae.png"><br>准备：<strong>为类变量分配内存，并</strong>初始化为数据类型默认的零值（如 0、0L、null、false 等)<br>解析：符号变量变为直接变量</p><h3 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h3><p><code>**&lt;clinit&gt; ()方法**</code>，在编译器收集静态变量<br>说明： <clinit> ()方法是编译之后自动生成的。<br>对于<clinit> () 方法的调用，虚拟机会自己确保其在多线程环境中的安全性。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="#卸载"></a><a href="https://javaguide.cn/java/jvm/class-loading-process.html#%E5%8D%B8%E8%BD%BD">#</a>卸载</h2><p>卸载这部分内容来自 <a href="https://github.com/Snailclimb/JavaGuide/issues/662">issue#662open in new window</a>由 <a href="https://github.com/guang19">guang19open in new window</a> 补充完善。<br>卸载类即该类的 Class 对象被 GC。<br>卸载类需要满足 3 个要求:</p><ol><li>该类的所有的实例对象都已被 GC，也就是说堆不存在该类的实例对象。</li><li>该类没有在其他任何地方被引用</li><li>该类的类加载器的实例已被 GC</li></ol><p>所以，在 JVM 生命周期内，由 jvm 自带的类加载器加载的类是不会被卸载的。但是由我们自定义的类加载器加载的类是可能被卸载的。</p><h2 id="类加载器详解"><a href="#类加载器详解" class="headerlink" title="类加载器详解"></a>类加载器详解</h2><p>JVM 中内置了三个重要的 ClassLoader，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自<strong>java.lang.ClassLoader：</strong></p><ol><li><strong>BootstrapClassLoader(启动类加载器)</strong> ：最顶层的加载类，由 C++实现，负责加载 %JAVA_HOME%&#x2F;lib目录下的 jar 包和类或者被 -Xbootclasspath参数指定的路径中的所有类。</li><li><strong>ExtensionClassLoader(扩展类加载器)</strong> ：主要负责加载 %JRE_HOME%&#x2F;lib&#x2F;ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包。</li><li><strong>AppClassLoader(应用程序类加载器)</strong> ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ol><h3 id="双亲委派："><a href="#双亲委派：" class="headerlink" title="双亲委派："></a>双亲委派：</h3><p>系统中的 ClassLoader 在协同工作的时候会默认使用 <strong>双亲委派模型</strong> 。即在类加载的时候，系统会首先判断当前类<strong>是否被加载过</strong>。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派给父类加载器的<code>** loadClass() **</code>处理，因此所有的请求最终都应该传送到顶层的启动类加载器 BootstrapClassLoader 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为 null 时，会使用启动类加载器 BootstrapClassLoader 作为父类加载器。（非真正继承父类，只是指代优先级）<br>AppClassLoader的父类加载器为ExtClassLoader， ExtClassLoader的父类加载器为 null，<strong>null 并不代表ExtClassLoader没有父类加载器，而是 BootstrapClassLoader</strong><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656257510890-51524e0e-25b2-4581-9c00-b409209f5569.png" alt="image.png"><br>双亲委派模型的好处<br>优势：</p><ul><li>优先级的等级制：避免类的重复加载</li><li>保护核心api不被修改</li></ul><p>如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 java.lang.Object 类的话，那么程序运行的时候，系统就会出现多个不同的 Object 类</p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader。如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader。</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>大部分情况，对象都会首<strong>先在 Eden 区域分配</strong>，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(<strong>Eden 区-&gt;Survivor 区后对象的初始年龄变为 1</strong>)，当它的年龄增加到一定程度（默认为大于 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -<code>XX:MaxTenuringThreshold </code>来设置默认值，这个值会在虚拟机运行过程中进行调整，可以通过-XX:+PrintTenuringDistribution来打印出当次 GC 后的 Threshold。<br>Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。<br><img src="https://s2.loli.net/2022/04/27/3PXiuK8gW2OLtse.png#crop=0&crop=0&crop=1&crop=1&id=QS2jI&originHeight=737&originWidth=1644&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>经过这次 GC 后，Eden 区和”From”区已经被清空。这个时候，”From”和”To”会交换他们的角色。在这个过程中，有可能当次 Minor GC 后，Survivor 的”From”区域空间不够用，有一些还达不到进入老年代条件的实例放不下，则<strong>放不下的部分会提前进入老年代</strong>。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656242441356-9632597a-3db0-427e-a4e3-7fdb3fca891f.png"><br>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：<br>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><h3 id="1-6-空间分配担保"><a href="#1-6-空间分配担保" class="headerlink" title="#1.6 空间分配担保"></a><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#_1-6-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D">#</a>1.6 空间分配担保</h3><p>空间分配担保是为了确保在 Minor GC 之前老年代本身还有容纳新生代所有对象的剩余空间。<br>《深入理解 Java 虚拟机》第三章对于空间分配担保的描述如下：<br>JDK 6 Update 24 之前，在发生 Minor GC 之前，虚拟机必须先检查<strong>老年代最大可用的连续空间</strong>是否大于<strong>新生代所有对象总空间</strong>，如果这个条件成立，那这一次 Minor GC 可以确保是安全的。如果不成立，则虚拟机会先查看 -XX:HandlePromotionFailure 参数的设置值是否允许担保失败(Handle Promotion Failure);如果允许，那会继续检查老年代最大可用的连续空间<strong>是否大于历次晋升到老年代对象的平均大小</strong>，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的;如果<strong>小于</strong>，或者 -XX: HandlePromotionFailure 设置<strong>不允许冒险</strong>，那这时就要改为进行一次** Full GC<strong>。<br>JDK 6 Update 24 之后的规则变为只要</strong>老年代的连续空间<strong>大于</strong>新生代对象总大小<strong>或者</strong>之前young GC晋升的平均大小<strong>，就会进行 <strong>Minor GC</strong>，</strong>否则将进行 Full GC.**<br><strong>Full GC条件：young GC平均晋升大小大于老年代的连续空间。</strong><br><strong>young GC: eden区满了</strong></p><h2 id="2-对象已经死亡？"><a href="#2-对象已经死亡？" class="headerlink" title="2 对象已经死亡？"></a>2 对象已经死亡？</h2><p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。</p><h3 id="2-1-引用计数法"><a href="#2-1-引用计数法" class="headerlink" title="#2.1 引用计数法"></a><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#_2-1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95">#</a>2.1 引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。<br><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。</strong></p><h3 id="2-2-可达性分析算法"><a href="#2-2-可达性分析算法" class="headerlink" title="2.2 可达性分析算法"></a>2.2 可达性分析算法</h3><p>枚举一系列的对象称为 <strong>“GC Roots”</strong><br><strong>哪些对象可以作为 GC Roots 呢？</strong><br><strong>堆以外的，保存了堆上对象的引用，但是自己不在堆上。</strong></p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul><p><strong>对象可以被回收，就代表一定会被回收吗？</strong><br>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历<strong>两次标记过程</strong>；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象<strong>没有覆盖 finalize 方法</strong>，或 finalize 方法<strong>已经被虚拟机调用过</strong>时，虚拟机将这两种情况视为没有必要执行。——直接回收<br>被判定为需要执行finalize方法的对象将会被放在一个队列中进行<strong>第二次标记</strong>，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。<br>Object 类中的 finalize 方法一直被认为是一个糟糕的设计，成为了 Java 语言的负担，影响了 Java 语言的安全和 GC 的性能。JDK9 版本及后续版本中各个类中的 finalize 方法会被逐渐弃用移除。忘掉它的存在吧！</p><h3 id="2-5-如何判断一个常量是废弃常量？"><a href="#2-5-如何判断一个常量是废弃常量？" class="headerlink" title="2.5 如何判断一个常量是废弃常量？"></a>2.5 如何判断一个常量是废弃常量？</h3><p>运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？</p><ol><li><strong>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代</strong></li><li><strong>JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代</strong> 。</li><li><strong>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</strong></li></ol><p>假如在字符串常量池中存在字符串 “abc”，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池了。</p><h3 id="2-6-如何判断一个类是无用的类"><a href="#2-6-如何判断一个类是无用的类" class="headerlink" title="#2.6 如何判断一个类是无用的类"></a><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#_2-6-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E7%B1%BB%E6%98%AF%E6%97%A0%E7%94%A8%E7%9A%84%E7%B1%BB">#</a>2.6 如何判断一个类是无用的类</h3><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？<br>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 <strong>“无用的类”</strong> ：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h2 id="垃圾收集器实现"><a href="#垃圾收集器实现" class="headerlink" title="垃圾收集器实现"></a>垃圾收集器实现</h2><h3 id="serial——serial-old"><a href="#serial——serial-old" class="headerlink" title="serial——serial old"></a>serial——serial old</h3><p>串行，简单高效，没有线程交互的开销</p><h3 id="ParNew——CMS"><a href="#ParNew——CMS" class="headerlink" title="ParNew——CMS"></a>ParNew——CMS</h3><p>多个GC线程并行，serial的多线程版本</p><h3 id="Parallel-Scavenge——Parallel-Old（JDK-1-8）"><a href="#Parallel-Scavenge——Parallel-Old（JDK-1-8）" class="headerlink" title="Parallel Scavenge——Parallel Old（JDK 1.8）"></a>Parallel Scavenge——Parallel Old（JDK 1.8）</h3><p>多个GC线程并行，吞吐量优先</p><hr><h3 id="CMS-Concurrent-mark-sweep"><a href="#CMS-Concurrent-mark-sweep" class="headerlink" title="CMS (Concurrent mark sweep)"></a>CMS (Concurrent mark sweep)</h3><p>并发运行，作用于老年代，响应速度优先，容易出现内存碎片<br>三个标记过程：并发标记时间最长。<br>stop the world: 初始标记、重新标记。</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下<strong>直接与 root 相连的对象</strong>，<strong>速度很快</strong> ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，遍历对象图。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了<strong>修正并发标记</strong>期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p><img src="https://s2.loli.net/2022/04/29/dXNv7BR9q2JLM6D.png#crop=0&crop=0&crop=1&crop=1&id=qvbUx&originHeight=543&originWidth=1161&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>并发清理的时候：不能使用标记压缩，因为有用户线程在执行<br><strong>缺点：</strong><br>会产生内存碎片<br>无法处理浮动垃圾：用户线程在并发标记过程中产生。<br>并发标记过程虽然不会导致用户停顿，但是吞吐量降低。</p><h3 id="G1-Garbage-first-——（JDK-1-9）"><a href="#G1-Garbage-first-——（JDK-1-9）" class="headerlink" title="G1(Garbage first)——（JDK 1.9）"></a>G1(Garbage first)——（JDK 1.9）</h3><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)</strong> 。</p><p>在region之间是，标记复制；整体上是标记整理。<br>新生代并行（STW)，老年代并发。</p><p>优点：<br><strong>可预测的停顿</strong></p><p><img src="https://s2.loli.net/2022/04/29/Ic15RTYyv4rOfij.png#crop=0&crop=0&crop=1&crop=1&id=kx9dJ&originHeight=413&originWidth=1327&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656240125465-d542ce98-66ef-413d-9f2c-a25c4b9bb207.png" alt="![image.png](https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656240260081-065b8b2f-3ac0-4e56-8ca0-716082bd9d23.png)"></p><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656240300602-f602fdbc-7dd5-4796-96bd-2e4a9664b0bc.png" alt="image.png"><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656240319216-139acc90-f6b9-4e44-8e55-8be6e3889649.png" alt="image.png"><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656234301046-401952ec-dd02-4870-971a-9d3077e2fdd1.png" alt="image.png"><br>1.8 默认——parrallel Scavenge, parrallel old<br>1.9默认——G1</p><p> <img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656240375289-cc129899-0f6d-4573-865e-a1c1df7a771b.png#clientId=ub1042203-beae-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u03ecbeed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=504&originWidth=960&originalType=url&ratio=1&rotation=0&showTitle=false&size=218803&status=done&style=none&taskId=u3408fa3f-cd85-45dd-b29c-a750b6489ee&title=" alt="image.png"></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h2><p>没有空闲内存，GC也无法提供内存</p><ol><li><code>**java.lang.OutOfMemoryError: GC Overhead Limit Exceeded** </code>： 当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。</li><li><code>**java.lang.OutOfMemoryError: Java heap space**</code> :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。(和配置的最大堆内存有关，且受制于物理内存大小。最大堆内存可通过-Xmx参数配置，若没有特别配置，将会使用默认值，详见：<a href="https://stackoverflow.com/questions/28272923/default-xmxsize-in-java-8-max-heap-size">Default Java 8 max heap sizeopen in new window</a>)</li><li><strong>java.lang.OutOfMemoryError: Metaspace</strong></li></ol><p><strong>原因：</strong><br>内存泄露可能导致内存溢出，gc频率变高；堆大小设置不够；创建了大量大对象。</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>对象不会再被用到，但是没有被GC回收。<br>严格意义：忘记断开的引用。忘记关闭的数据库连接之类。</p><p>广义上内存泄漏：长周期的引用短周期</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656259364161-33e775ee-872c-4578-a90a-03aaaea24f6e.png#clientId=udb9bcaa0-62b5-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=462&id=u71931ec7&name=image.png&originHeight=462&originWidth=1072&originalType=binary&ratio=1&rotation=0&showTitle=false&size=293768&status=done&style=none&taskId=ub8f337fb-4f62-445c-af5c-0f5e87dbbc4&title=&width=1072" alt="image.png"><br><img src="https://s2.loli.net/2022/06/25/L8j5ZrXEMkKsNmp.png#crop=0&crop=0&crop=1&crop=1&id=vj1kG&originHeight=320&originWidth=736&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://s2.loli.net/2022/06/27/Ht9zJONsUSG7Zn2.png#crop=0&crop=0&crop=1&crop=1&id=Gk1uz&originHeight=694&originWidth=1084&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://s2.loli.net/2022/06/25/UmN4VHTzuF2YlG3.png#crop=0&crop=0&crop=1&crop=1&id=lo420&originHeight=452&originWidth=1082&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="性能监控与调优"><a href="#性能监控与调优" class="headerlink" title="性能监控与调优"></a>性能监控与调优</h1><ul><li><strong>jps</strong> (JVM Process Status）: 类似 UNIX 的 ps 命令。用于<strong>查看</strong>所有 <strong>Java 进程</strong>的启动类、传入参数和 <strong>Java 虚拟机参数</strong>等信息；</li></ul><p>jps -v：输出虚拟机进程启动时 JVM 参数。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656258162012-709dc46b-0f0b-4f0b-ae27-ddb6fc70b691.png#clientId=udb9bcaa0-62b5-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=772&id=uc8332da0&name=image.png&originHeight=772&originWidth=1299&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93217&status=done&style=none&taskId=u232bb630-851a-4b88-9f9c-b554f4c7848&title=&width=1299" alt="image.png"></p><ul><li><p><strong>jstat</strong>（JVM Statistics Monitoring Tool）: 用于收集 HotSpot 虚拟机各方面的运行数据;虚拟机进程中的类信息、内存、垃圾收集、JIT 编译等运行数据，在没有 GUI，只提供了纯文本控制台环境的服务器上，它将是运行期间定位虚拟机性能问题的首选工具。</p><blockquote><ul><li><strong>常见的 option 如下：</strong></li><li>jstat -class vmid ：显示 ClassLoader 的相关信息；</li><li>jstat -compiler vmid ：显示 JIT 编译的相关信息；</li><li>jstat -gc vmid ：显示与 GC 相关的堆信息；</li><li>jstat -gccapacity vmid ：显示各个代的容量及使用情况；</li><li>jstat -gcnew vmid ：显示新生代信息；</li><li>jstat -gcnewcapcacity vmid ：显示新生代大小与使用情况；</li><li>jstat -gcold vmid ：显示老年代和永久代的行为统计，从jdk1.8开始,该选项仅表示老年代，因为永久代被移除了；</li><li>jstat -gcoldcapacity vmid ：显示老年代的大小；</li><li>jstat -gcpermcapacity vmid ：显示永久代大小，从jdk1.8开始,该选项不存在了，因为永久代被移除了；</li><li>jstat -gcutil vmid ：显示垃圾收集信息；</li></ul></blockquote></li><li><p><strong>jinfo</strong> (Configuration Info for Java) : Configuration Info for Java,显示虚拟机配置信息;</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656258546872-23d46c28-f805-49ab-ac1e-39c01145e6df.png#clientId=u2e190268-4930-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uabb8d74c&name=image.png&originHeight=376&originWidth=679&originalType=url&ratio=1&rotation=0&showTitle=false&size=121889&status=done&style=none&taskId=u89df2a89-4df7-4ed5-80e0-6d0b108ae6f&title=" alt="image.png"><br>修改：进程结束后失效</p><ul><li><strong>jmap</strong> (Memory Map for Java) : 生成堆转储快照;j。 如果不使用 jmap 命令，要想获取 Java 堆转储，可以使用 “-XX:+HeapDumpOnOutOfMemoryError” 参数，可以让虚拟机在 OOM 异常出现之后自动生成 dump 文件，Linux 命令下可以通过 kill -3 发送进程退出信号也能拿到 dump 文件。</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656258619413-bfc915f5-c7e7-4fbb-9eac-779c01236d0e.png#clientId=u2e190268-4930-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u68b8147a&name=image.png&originHeight=673&originWidth=991&originalType=url&ratio=1&rotation=0&showTitle=false&size=200793&status=done&style=none&taskId=ud4b6865e-d65c-4e2d-bae7-9874929b04c&title=" alt="image.png"></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656258639250-2e345745-d887-490f-9d04-aa13a3c001a1.png#clientId=u2e190268-4930-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u342ab5d7&name=image.png&originHeight=399&originWidth=971&originalType=url&ratio=1&rotation=0&showTitle=false&size=263020&status=done&style=none&taskId=u7a1f4b9f-7297-4ca8-a549-2bc09f50bf3&title=" alt="image.png"></p><ul><li><strong>jhat</strong> (JVM Heap Dump Browser) : 用于分析 heapdump 文件，它会建立一个 HTTP&#x2F;HTML 服务器，让用户可以在浏览器上查看分析结果;</li><li><strong>jstack</strong> (Stack Trace for Java) : 生成虚拟机当前时刻的<strong>线程快照</strong>，线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合。（当线程出现长时间停顿时使用）如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿的原因</li><li>jcmd 除了jstat</li></ul><hr><p>来源：</p><p>尚硅谷：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=31cbec680fd9e232150a7c8012c1968a">https://www.bilibili.com/video/BV1PJ411n7xZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=31cbec680fd9e232150a7c8012c1968a</a></p><p>Javaguide: <a href="https://javaguide.cn/">https://javaguide.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM阅读笔记，个人使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL总结</title>
    <link href="/2022/07/05/MySQL%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/05/MySQL%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="基本构架"><a href="#基本构架" class="headerlink" title="基本构架"></a>基本构架</h2><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1654247558600-08aae83f-963c-4ce0-aad6-cdd18db70dd4.png"></p><p>innodb中存在Buffer Pool<br>有了缓冲池后：</p><ul><li>当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会<strong>直接读取 Buffer Pool 中的数据</strong>，否则再去磁盘中读取,每次读取一整页。</li><li>当修改数据时，首先是<strong>修改 Buffer Pool 中数据所在的页</strong>，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。</li></ul><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656916560634-e3e5a611-86ae-4dcd-864d-9131c6db85fe.png"></p><h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h3><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/90a1d595d8834d099eb4072a55fd28c9.png" alt="90a1d595d8834d099eb4072a55fd28c9"></p><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656990589737-0d5ff6d6-3493-4046-8f6e-bef8b73a871a.jpeg"><br>为了防止预读失效，比方说在执行一个大的查询的时候，把所有的热点页都淘汰了。设置了<strong>old 区域 和 young 区域</strong>。innodb_old_blocks_pc 参数来设置，默认是 37，代表整个 LRU 链表中 young 区域与 old 区域比例是 63:37。新的页放到冷数据区表头。如果<strong>两次访问时间超过1s</strong>, 则认定为（不是在全表扫描）热数据，移到热数据区。（全表扫描相邻的记录可能在同一页，所以两次访问时间要超过1s.<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656916813917-cb2ebd9c-64bf-4d8f-86ef-1cd1cb4d1b94.png"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="InnoDB索引模型"><a href="#InnoDB索引模型" class="headerlink" title="InnoDB索引模型"></a>InnoDB索引模型</h3><p>叶子节点的内容，索引类型分为主键索引（聚簇索引（clustered index））和非主键索引（二级索引）。<br><strong>业务逻辑的字段做主键</strong>，则往往<strong>不容易保证有序插入</strong>，这样写数据成本相对较高。（一般不用）</p><h3 id="索引失效的原因"><a href="#索引失效的原因" class="headerlink" title="索引失效的原因"></a>索引失效的原因</h3><p><strong>对索引字段做操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</strong><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656987918043-118b0c47-e893-4798-8e6b-1a4727f264aa.jpeg"></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="Write-Ahead-Logging-WAL"><a href="#Write-Ahead-Logging-WAL" class="headerlink" title="Write-Ahead Logging(WAL)"></a>Write-Ahead Logging(WAL)</h3><p>MySQL里经常说到的WAL技术，WAL的全称是Write-Ahead Logging（预写日志），它的关键点就是先写日志，再写磁盘。<br>将<strong>随机的脏页写入</strong>变成<strong>顺序的日志刷盘。</strong><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656993479911-d2e0dabf-b76c-4744-a977-85e9db4c651c.jpeg"></p><h3 id="redolog-何时刷盘"><a href="#redolog-何时刷盘" class="headerlink" title="redolog 何时刷盘"></a>redolog 何时刷盘</h3><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656993350740-e37cbc78-4d4a-41de-940b-191466d55eda.jpeg"><br>innodb_flush_log_at_trx_commit 设置为[0，1，2]<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1656989098252-0f6338da-88af-4d13-a4da-0e26bf23bdc0.png#clientId=u7c0d82e2-868c-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uf723e515&margin=%5Bobject%20Object%5D&name=image.png&originHeight=332&originWidth=550&originalType=url&ratio=1&rotation=0&showTitle=false&size=110632&status=done&style=none&taskId=u71714a39-e1d0-4b87-9807-c19f1ad4c34&title=" alt="image.png">(图中存在部分不准确）<br>事务执行中间过程的 redo log 也是直接写在 redo log buffer 中的，这些 redo log 也会被后台线程一起持久化到磁盘。<br>设置为 0 的时候，表示每次事务提交时都只是把 <strong>redo log 留在 redo log buffer <strong>中，</strong>后台线程，每隔 1 秒，</strong>就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。（在这个过程中，会带走其他prepare阶段的日志）<br>设置为 1 的时候，表示每次事务提交时都将 <strong>redo log 直接持久化到磁盘（</strong>在这个过程中，会带走其他prepare阶段的日志)<br><strong>设置为 2 的时候</strong>，表示每次事务提交时都只是把** redo log 写到 page cache**</p><h3 id="什么是-MySQL-的双1设置"><a href="#什么是-MySQL-的双1设置" class="headerlink" title="什么是 MySQL 的双1设置 ?"></a>什么是 MySQL 的双1设置 ?</h3><p><code>**sync_binlog** </code>和 <code>**innodb_flush_log_at_trx_commit** </code>都设置成 1<br><strong>一个事务完整提交前，需要等待两次刷盘：</strong><br>redo log（prepare 阶段）持久化到磁盘<br>binlog 持久化到磁盘</p><h3 id="Crash-Safe"><a href="#Crash-Safe" class="headerlink" title="Crash-Safe"></a>Crash-Safe</h3><h4 id="两阶段提交——保持主从数据库一致性"><a href="#两阶段提交——保持主从数据库一致性" class="headerlink" title="两阶段提交——保持主从数据库一致性"></a>两阶段提交——保持主从数据库一致性</h4><p>redo log prepare———&gt;写binlog（用于更新从数据库）———–&gt;redo log commit</p><h4 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h4><ul><li>redolog 是否有commit，事务提交</li><li>redolog只有prepare, 拿<strong>XID 去 binlog 找对应的事务</strong>, 看是否有记录，有且完整，事务提交；无，事务回滚。</li></ul><h4 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h4><h4 id="介绍一下日志逻辑序列号"><a href="#介绍一下日志逻辑序列号" class="headerlink" title="介绍一下日志逻辑序列号 ?"></a>介绍一下日志逻辑序列号 ?</h4><p><code>**log sequence number**</code>，简称 LSN<br>LSN 是单调递增的，<strong>对应每个 redo log 的写入点</strong>，值为上一个写入点 + 本次写入的 redo log 长度<br>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log<br>如图三个并发事务：<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656993541917-a1acade3-ce46-4603-9934-8ddb2d18c6cc.png" alt="image.png"><br>从图中可以看到，trx1 是第一个到达的，会被选为这组的 leader；等 trx1 要开始写盘的时候，这个组里面已经有了三个事务，这时候 LSN 也变成了 160；trx1 去写盘的时候，带的就是 LSN&#x3D;160，因此等 trx1 返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；这时候 trx2 和 trx3 就可以直接返回了。所以，一次组提交里面，组员越多，节约磁盘 IOPS 的效果越好。但如果只有单线程压测，那就只能老老实实地一个事务对应一次持久化操作了。<br>MySQL 为了让组提交的效果更好，把 redo log 做 fsync 的时间拖到了步骤 1 之后。也就是说，上面的图变成了这样：不止redolog组提交；binlog也要组提交。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656993701281-9a287be3-94e9-4824-bc80-38a3a67ad4dc.png" alt="image.png"><br>在page cache中积累binlog，一起fsync.</p><h3 id="WAL-机制是减少磁盘写，但是每次提交事务都要写-redo-log-和-binlog，这样读写次数不是很多吗"><a href="#WAL-机制是减少磁盘写，但是每次提交事务都要写-redo-log-和-binlog，这样读写次数不是很多吗" class="headerlink" title="WAL 机制是减少磁盘写，但是每次提交事务都要写 redo log 和 binlog，这样读写次数不是很多吗 ?"></a>WAL 机制是减少磁盘写，但是每次提交事务都要写 redo log 和 binlog，这样读写次数不是很多吗 ?</h3><p>WAL 机制主要得益于两个方面：</p><ol><li>redo log 和 binlog 都是<strong>顺序写</strong>，磁盘的顺序写比随机写速度要快</li><li><strong>组提交机制</strong>，可以大幅度降低磁盘的 IOPS (io per second)消耗</li></ol><h3 id="如果你的-MySQL-现在出现了性能瓶颈，而且瓶颈在-IO-上，可以通过哪些方法来提升性能呢"><a href="#如果你的-MySQL-现在出现了性能瓶颈，而且瓶颈在-IO-上，可以通过哪些方法来提升性能呢" class="headerlink" title="如果你的 MySQL 现在出现了性能瓶颈，而且瓶颈在 IO 上，可以通过哪些方法来提升性能呢 ?"></a>如果你的 MySQL 现在出现了性能瓶颈，而且瓶颈在 IO 上，可以通过哪些方法来提升性能呢 ?</h3><p>将** binlog 的提交延迟<strong>设置大一点，增加组提交的组员，减少写盘次数<br><strong>不用双一：都修改为大于1的值</strong><br>将 sync_binlog 设置为大于1的值，但这可能导致</strong>出现数据丢失的风险（主机宕机时）**<br>将 innodb_flush_log_at_trx_commit 设置为2，但这可能导致出现<strong>数据丢失的风险（主机宕机时）</strong></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>ACID：原子性、一致性、隔离性、持久性</p><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><p>脏读：一个事务读到另一个事务还未提交的数据<br>修改丢失：两个事务同时修改，其中一个事务修改丢失<br>不可重复读：同一个事务前后，读取同一条记录不一致<br>幻读：查询时没有对应行，插入时确已经存在。</p><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657023813041-fb9411f8-8bfc-43ac-a996-0e33408be813.jpeg"></p><h4 id="可重复读的实现"><a href="#可重复读的实现" class="headerlink" title="可重复读的实现"></a>可重复读的实现</h4><p>事务数组，未提交的事务。当前活跃的事务tx_id<br>基于数据行的 trx_id和这个一致性视图的对比结果得到的。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1656996126510-60f15294-b114-4146-a735-e9d457700c50.jpeg"></p><ol><li>如果落在<strong>绿色</strong>部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是<strong>可见</strong>的；</li><li>如果落在<strong>红色</strong>部分，表示这个版本是由将来启动的事务生成的，是肯定<strong>不可见</strong>的；</li><li>a. 若  trx_id在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 trx_id<strong>不在数组</strong>中，表示这个版本是<strong>已经提交了的事务</strong>生成的（虽然可能生成的晚，但是已经提交），可见。</li></ol><h4 id="快照读（一致性读）和当前读"><a href="#快照读（一致性读）和当前读" class="headerlink" title="快照读（一致性读）和当前读"></a>快照读（一致性读）和当前读</h4><blockquote><p><strong>快照读</strong>： 读取的是记录数据的可见版本(MVCC)（有旧的版本）。不加锁,普通的select语句都是快照读,如：<br>select * from user where id &#x3D; 1;<br><strong>当前读</strong>：读取的是记录数据的最新版本，显式加锁的都是当前读, 与MVCC、事务无关<br>select * from user where id &#x3D; 1 for update;<br>select * from user where id &#x3D; 1 lock in share mode;<br>update, insert，delete语句 ， 例如，假设要update一条记录，但是另一个事务已经delete这条数据并且commit了，如果不加锁就会产生冲突。所以update的时候肯定要是当前读，得到最新的信息并且锁定相应的记录。</p></blockquote><h3 id="MVCC能否解决了幻读问题呢？"><a href="#MVCC能否解决了幻读问题呢？" class="headerlink" title="MVCC能否解决了幻读问题呢？"></a>MVCC能否解决了幻读问题呢？</h3><p><del>有关这个问题查了很多资料,有的说能解决，有的说不能解决，也有人说能解决部分幻读场景。这里部分解决指的是</del><strong><del>能解决~~~~快照读~~~~的幻读问题，不能解决~~~~当前读~~~~的幻读问题。</del></strong><br>具体可以看下面这篇文章<br>面试题之：MVCC能否解决幻读？<br><a href="https://link.zhihu.com/?target=https://blog.csdn.net/qq_35590091/article/details/107734005">https://blog.csdn.net/qq_35590091&#x2F;article&#x2F;details&#x2F;107734005</a><br>先说我的结论:<br>MVCC能解决不可重复读问题,但是不能解决幻读问题，不论是快照读和当前读都不能解决。RR级别解决幻读靠的是锁机制,而不是MVCC机制。<br>既然网上那么多人说，MVCC解决能解决快照读下的幻读问题， 那这里通过举示例来说明,MVCC解决不了快照读的幻读问题。<br>假设有张用户表,这张表的 id 是主键。表中一开始有4条数据。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1654690318406-e4f71199-4026-4a1d-926f-5810d68dda00.png#clientId=ud07a52c2-c035-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud921afc4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=180&originWidth=520&originalType=url&ratio=1&rotation=0&showTitle=false&size=118016&status=done&style=none&taskId=u6a5b06a6-89f3-4c62-b646-2886d43b896&title=" alt="image.png"></p><p>这里是在RR级别下研究(可重复读)。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1654690318893-3c7c0f4a-2458-4ea6-8e5d-f3bcf83ff142.png#clientId=ud07a52c2-c035-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub39dfea0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=720&originalType=url&ratio=1&rotation=0&showTitle=false&size=350457&status=done&style=none&taskId=u3c55cf6a-0660-460d-a616-a7303db4f5c&title=" alt="image.png"></p><p>1、事务A,查询是否存在 id&#x3D;5 的记录，没有则插入，这是我们期望的正常业务逻辑。<br>2、这个时候 事务B 新增的一条 id&#x3D;5 的记录，并提交事务。<br>3、事务A,再去查询 id&#x3D;5 的时候,发现还是没有记录。<br>上面的文章是这样来举例说明,事务A第一次和第二次读到的是一样的，所以认为解决了幻读。我不认为这个是解决了幻读，而是解决了不可能重复读。它保证了第一次和第二次所读到的结果是一样的。<br>解决幻读了吗？显然没有，因为这个时候如果事务A执行一条插入操作<br>INSERT INTO <code>user</code> (<code>id</code>, <code>name</code>, <code>pwd</code>) VALUES (5, ‘田七’, ‘fff’);</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1654690318902-47d537a5-dd81-4880-b9cc-040e3c67f1e4.png#clientId=ud07a52c2-c035-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uf0e0c12b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=353&originWidth=720&originalType=url&ratio=1&rotation=0&showTitle=false&size=410430&status=done&style=none&taskId=udb55834f-8055-496b-afbc-360863fec04&title=" alt="image.png"></p><p>最终 事务A 提交事务，发现报错了。这就很奇怪，查的时候明明没有这条记录，但插入的时候 却告诉我 主键冲突，这就好像幻觉一样。这才是幻读问题。<br>所以说MVCC是不能解决的，要想解决还是需要锁。<br>这里事务A能正常的插入的前提就是其它事务不能插入id&#x3D;5并提交成功。要解决这个问题也很简单，就是事务A先获得id&#x3D;5这个排它锁。<br>我们可以在事务A第一次查询的时候加一个排他锁<br><code>select *  from </code>user<code> where id = 5 for update</code><br>那么事务B的插入动作永远属于堵塞状态，直到事务A插入成功，并提交。那么最终是事务B报主键冲突而回滚。但事务A不会因为查询的时候没有这条记录，插入失败。也就解决了幻读问题。<br>所以说 RR级别下解决幻读问题靠的是锁机制，而不是MVCC机制。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657030396360-e6c07724-f3f2-49af-8b81-e3ee705a63c4.jpeg"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657030965415-bd9f16bf-aec0-4d78-81cb-e00fc8ecf828.jpeg"><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1655036448772-34dd91c2-00b7-4a09-a43c-209f551630dc.png"><br>备库B跟主库A之间维持了一个<strong>长连接</strong>。主库A内部有一个线程，专门用于服务备库B的这个长连接。一个事务日志同步的完整过程是这样的：</p><ol><li>在备库B上通过change master命令，设置主库A的IP、端口、用户名、密码，以及要<strong>从哪个位置开始请求binlog</strong>，这个位置包含文件名和日志偏移量。</li><li>在备库B上执行start slave命令，这时候备库会启动<strong>两个线程</strong>，就是图中的<strong>io_thread</strong>和<strong>sql_thread</strong>。其中io_thread负责与主库建立连接。</li><li>主库A校验完用户名、密码后，开始按照备库B传过来的位置，从本地读取binlog，发给B。</li><li>备库B拿到binlog后，写到本地文件，称为<strong>中转日志（relay log）</strong>。</li><li><strong>sql_thread读取中转日志</strong>，解析出日志里的命令，并执行。</li></ol><h3 id="减少主备延迟"><a href="#减少主备延迟" class="headerlink" title="减少主备延迟"></a>减少主备延迟</h3><p>coordinator就是原来的sql_thread, 不过现在它不再直接更新数据了，只负责读取中转日志和分发事务。真正更新日志的，变成了worker线程。而<strong>work</strong>线程的个数，就是由参数<code>**slave_parallel_workers**</code>决定的。<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1655098773823-568eea7c-5564-48df-a221-dca3dedb94e0.png"><br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1657031476454-7d0f4a9b-84c9-4006-80a0-bd9ef17165e6.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第80场双周赛 TP-Link</title>
    <link href="/2022/06/25/%E7%AC%AC80%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9BTP-Link/"/>
    <url>/2022/06/25/%E7%AC%AC80%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9BTP-Link/</url>
    
    <content type="html"><![CDATA[<p>前两题略</p><h4 id="2301-替换字符后匹配"><a href="#2301-替换字符后匹配" class="headerlink" title="2301. 替换字符后匹配"></a><a href="https://leetcode.cn/problems/match-substring-after-replacement/">2301. 替换字符后匹配</a></h4><p>难度困难10收藏分享切换为英文接收动态反馈<br>给你两个字符串 s 和 sub 。同时给你一个二维字符数组 mappings ，其中 mappings[i] &#x3D; [oldi, newi] 表示你可以将 sub 中任意数目的 oldi 字符替换为 newi 。sub 中每个字符 <strong>不能</strong> 被替换超过一次。<br>如果使用 mappings 替换 0 个或者若干个字符，可以将 sub 变成 s 的一个子字符串，请你返回 true，否则返回 false 。<br>一个 <strong>子字符串</strong> 是字符串中连续非空的字符序列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s &#x3D; “fool3e7bar”, sub &#x3D; “leet”, mappings &#x3D; [[“e”,”3”],[“t”,”7”],[“t”,”8”]] <strong>输出：</strong>true <strong>解释：</strong>将 sub 中第一个 ‘e’ 用 ‘3’ 替换，将 ‘t’ 用 ‘7’ 替换。 现在 sub &#x3D; “l3e7” ，它是 s 的子字符串，所以我们返回 true 。</p><p><strong>思路</strong>：使用一个boolean[][] vis 数组，记录mapppings映射关系。（或者使用HashMap&lt;Character, set<Character>&gt;);<br>           时间复杂度：O（mn), 先找到s 字符串中的起始点，再开始遍历字符串sub.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matchReplacement</span><span class="hljs-params">(String s, String sub, <span class="hljs-type">char</span>[][] mappings)</span> &#123;<br>            <span class="hljs-type">boolean</span>[][] vis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">128</span>][<span class="hljs-number">128</span>];<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings.length; i++) &#123;<br>               vis[mappings[i][<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>][mappings[i][<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-literal">true</span>;<br>           &#125;<br><br>           <span class="hljs-comment">//</span><br>           <span class="hljs-type">char</span> start=sub.charAt(<span class="hljs-number">0</span>);<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length() &amp;&amp; i+sub.length()-<span class="hljs-number">1</span>&lt;s.length(); i++) &#123;<br>               <span class="hljs-type">char</span> c=s.charAt(i);<br>               <span class="hljs-keyword">if</span>(c==start || vis[start-<span class="hljs-string">&#x27;0&#x27;</span>][c-<span class="hljs-string">&#x27;0&#x27;</span>])&#123;<br>                   <span class="hljs-keyword">if</span>(match(s.substring(i+<span class="hljs-number">1</span>),sub.substring(<span class="hljs-number">1</span>),vis))&#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>       &#125;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(String s, String sub, <span class="hljs-type">boolean</span>[][] vis)</span>&#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sub.length(); i++) &#123;<br>               <span class="hljs-keyword">if</span>(s.charAt(i)!=sub.charAt(i) &amp;&amp; !vis[sub.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>][s.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>])&#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br><br><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2302-统计得分小于-K-的子数组数目"><a href="#2302-统计得分小于-K-的子数组数目" class="headerlink" title="2302. 统计得分小于 K 的子数组数目"></a><a href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/">2302. 统计得分小于 K 的子数组数目</a></h4><p>难度困难9收藏分享切换为英文接收动态反馈<br>一个数字的 <strong>分数</strong> 定义为数组之和 <strong>乘以</strong> 数组的长度。</p><ul><li>比方说，[1, 2, 3, 4, 5] 的分数为 (1 + 2 + 3 + 4 + 5) * 5 &#x3D; 75 。</li></ul><p>给你一个正整数数组 nums 和一个整数 k ，请你返回 nums 中分数 **严格小于 **k 的 <strong>非空整数子数组数目</strong>。<br><strong>子数组 是数组中的一个连续元素序列。————&gt;滑动窗口</strong></p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums &#x3D; [2,1,4,3,5], k &#x3D; 10 <strong>输出：</strong>6 <strong>解释：</strong> 有 6 个子数组的分数小于 10 ： - [2] 分数为 2 * 1 &#x3D; 2 。 - [1] 分数为 1 * 1 &#x3D; 1 。 - [4] 分数为 4 * 1 &#x3D; 4 。 - [3] 分数为 3 * 1 &#x3D; 3 。  - [5] 分数为 5 * 1 &#x3D; 5 。 - [2,1] 分数为 (2 + 1) * 2 &#x3D; 6 。 注意，子数组 [1,4] 和 [4,3,5] 不符合要求，因为它们的分数分别为 10 和 36，但我们要求子数组的分数严格小于 10 。</p><p><strong>思路</strong>：滑动窗口，右拉左。<br>时间复杂度：O（n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSubarrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">long</span> k)</span> &#123;<br>        <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> sum=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//left和right组成的滑动窗口</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left=<span class="hljs-number">0</span>, right=<span class="hljs-number">0</span>;right&lt;nums.length;right++)&#123;<br>            <br>            sum+=nums[right];<br>            <br>            <span class="hljs-comment">//左边界右移</span><br>            <span class="hljs-keyword">while</span>(sum*(right-left+<span class="hljs-number">1</span>)&gt;=k)&#123;<br>                sum-=nums[left];<br>                left++;<br>            &#125;<br>            <span class="hljs-comment">//计算当前左，右边界，满足条件的所有子数组</span><br>            ans+=right-left+<span class="hljs-number">1</span>;  <br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/06/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>懒汉式——线程不安全、线程安全、DCL（锁的优化）<br>饿汉式<br>静态内部类<br>枚举</p><p>应用场景：JDK中runtime类，spring里bean默认单例</p><h1 id="1、懒汉式，线程不安全"><a href="#1、懒汉式，线程不安全" class="headerlink" title="1、懒汉式，线程不安全"></a>1、懒汉式，线程不安全</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>否<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <br>    <span class="hljs-comment">//public接口返回实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p><h1 id="2、懒汉式，线程安全"><a href="#2、懒汉式，线程安全" class="headerlink" title="2、懒汉式，线程安全"></a>2、懒汉式，线程安全</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。优点：第一次调用才初始化，避免内存浪费。缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、饿汉式"><a href="#3、饿汉式" class="headerlink" title="3、饿汉式"></a>3、饿汉式</h1><p><strong>是否 Lazy 初始化：</strong>否<br><strong>是否多线程安全：</strong>是，由JVM类加载机制保证。<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。优点：没有加锁，执行效率会提高。缺点：类加载时就初始化，浪费内存。它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><blockquote><p>类的加载过程：<br>1.加载<br>2.链接：a.   验证      b.准备（给类的静态成员变量赋默认值） c.解析<br>3.初始化：类静态成员变量初始化</p></blockquote><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、双检锁-x2F-双重校验锁（DCL，即-double-checked-locking）"><a href="#4、双检锁-x2F-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="4、双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）"></a>4、双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）</h1><p><strong>JDK 版本：</strong>JDK1.5 起<br><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>较复杂，同步代码块<br><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * double checked lock 懒汉式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br>    <span class="hljs-comment">//volatile禁止指令重排</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> SingletonDemo instance=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//减小锁的粒度</span><br>        <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonDemo.class)&#123;<br>                <span class="hljs-comment">//保证同步</span><br>                <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>                    instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//另外一个线程会拿到未初始化的实例</span><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为什么DCL要使用volatile"><a href="#为什么DCL要使用volatile" class="headerlink" title="为什么DCL要使用volatile"></a>为什么DCL要使用volatile</h4><p>DCL（双端检锁）机制不一定是线程安全的，原因是有指令重排的存在，加入volatile可以禁止指令重排<br>原因是在某一个线程执行到第一次检测的时候，读取到 instance 不为null，instance的引用对象可能没有完成实例化。因为instance &#x3D; new SingletonDemo()；可以分为以下三步进行完成：</p><ul><li>memory &#x3D; allocate(); &#x2F;&#x2F; 1、分配对象内存空间</li><li>instance(memory); &#x2F;&#x2F; 2、初始化对象</li><li>instance &#x3D; memory; &#x2F;&#x2F; 3、设置instance指向刚刚分配的内存地址，此时instance !&#x3D; null</li></ul><p>但是我们通过上面的三个步骤，能够发现，步骤2 和 步骤3之间不存在 数据依赖关系，而且无论重排前 还是重排后，程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。<br>顺序的情况下，new指令申请了一块内存空间，invokespecial调用构造方法为对象进行初始化，astore_1将变量和新创建的对象关联起来。但是invokespecial和astore_1这两条指令没有关联性，所以astore_1有可能会跑到invokespecial前面执行。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655909858776-f217a882-c30d-4597-8886-f9dae2e2cfff.png#clientId=u22564a2f-8e19-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc3b94206&margin=%5Bobject%20Object%5D&name=image.png&originHeight=618&originWidth=1078&originalType=url&ratio=1&rotation=0&showTitle=false&size=124241&status=done&style=none&taskId=u707058eb-44c0-455d-b7f7-aa30c6581f6&title=" alt="image.png"><br>如图，假设两个线程，线程1执行完astore_1时(此时instance已经指向一块内存地址，不为null，但是对象还未完成初始化)，CPU切换到线程2执行if(instance&#x3D;&#x3D;null)，结果为false，于是返回了一个不完整的对象。使用volatile禁止指令重排就可以避免这种情况发生。</p><h1 id="5、登记式-x2F-静态内部类"><a href="#5、登记式-x2F-静态内部类" class="headerlink" title="5、登记式&#x2F;静态内部类"></a>5、登记式&#x2F;静态内部类</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>一般<br><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，<strong>只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类</strong>，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon</span> &#123;<br>    <span class="hljs-comment">//创建私有的构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleTon</span><span class="hljs-params">()</span>&#123;<br> <br>    &#125;<br>    <span class="hljs-comment">//2.在类内部创建一个对象，不使用静态内部类的成员不会加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Holder</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingleTon</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleTon</span>();<br>    &#125;<br>    <span class="hljs-comment">//3.定义一个公开的方法来获得单例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleTon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//静态类直接通过类调用</span><br>        <span class="hljs-keyword">return</span> Holder.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6. 枚举"></a>6. 枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>     INSTANCE;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">businessMethod</span><span class="hljs-params">()</span> &#123;<br>          System.out.println(<span class="hljs-string">&quot;我是一个单例！&quot;</span>);<br>     &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用枚举类对象</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        System.out.println(s1==s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射机制破解单例模式（枚举除外）："><a href="#反射机制破解单例模式（枚举除外）：" class="headerlink" title="反射机制破解单例模式（枚举除外）："></a>反射机制破解单例模式（枚举除外）：</h1><p>通过反射拿到私有的构造器</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655954365715-e7d9a655-ca3f-4769-8d28-dc8c18f34e36.png#clientId=u7dc15063-1db3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=551&id=ue8f9c842&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=1723&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264772&status=done&style=none&taskId=u7d897b87-0b9c-4963-93b6-0a5b3fdc2f1&title=&width=1914.4444951599041" alt="image.png"></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakSingleton</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throw</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Singleton&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br><br>        c.setAccessible(<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//构造器c.newInstance()</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> c.newInstance();<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> c.newInstance();<br>        <span class="hljs-comment">//通过反射，得到的两个不同对象</span><br>        System.out.println(s1);<br>        System.out.println(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 如何避免以上的漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(); <br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在构造器中加个逻辑判断,多次调用,抛出异常</span><br>        <span class="hljs-keyword">if</span>(instance!= <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>()<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化，反序列化破坏"><a href="#序列化，反序列化破坏" class="headerlink" title="序列化，反序列化破坏"></a>序列化，反序列化破坏</h1><p>序列化会通过反射调用无参数的构造方法创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hollis;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by hollis on 16/2/5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableDemo1</span> &#123;<br>    <span class="hljs-comment">//为了便于理解，忽略关闭流操作及删除文件操作。真正编码时千万不要忘记</span><br>    <span class="hljs-comment">//Exception直接抛出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//Write Obj to file</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;tempFile&quot;</span>));<br>        oos.writeObject(Singleton.getSingleton());<br>        <span class="hljs-comment">//Read Obj from file</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;tempFile&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">newInstance</span> <span class="hljs-operator">=</span> (Singleton) ois.readObject();<br>        <span class="hljs-comment">//判断是否是同一个对象</span><br>        System.out.println(newInstance == Singleton.getSingleton());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>isInstantiable：如果一个serializable&#x2F;externalizable的类可以在运行时被实例化，那么该方法就返回true。<br>desc.newInstance：该方法通过反射的方式调用无参构造方法新建一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj;<br><span class="hljs-keyword">try</span> &#123;<br>    obj = desc.isInstantiable() ? desc.newInstance() : <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>    <span class="hljs-keyword">throw</span> (IOException) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(desc.forClass().getName(),<span class="hljs-string">&quot;unable to create instance&quot;</span>).initCause(ex);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何避免实现序列化单例模式的漏洞："><a href="#如何避免实现序列化单例模式的漏洞：" class="headerlink" title="如何避免实现序列化单例模式的漏洞："></a>如何避免实现序列化单例模式的漏洞：</h3><p>先给出解决方案，然后再具体分析原理：<br>只要在Singleton类中定义readResolve就可以解决该问题：<br>应用：currency类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hollis;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by hollis on 16/2/5.</span><br><span class="hljs-comment"> * 使用双重校验锁方式实现单例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <br>   <span class="hljs-comment">//返回单例</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span> &amp;&amp;<br>            handles.lookupException(passHandle) == <span class="hljs-literal">null</span> &amp;&amp;<br>            desc.hasReadResolveMethod())<br>        &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">rep</span> <span class="hljs-operator">=</span> desc.invokeReadResolve(obj);<br>            <span class="hljs-keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;<br>                rep = cloneArray(rep);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (rep != obj) &#123;<br>                handles.setObject(passHandle, obj = rep);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>hasReadResolveMethod:如果实现了serializable 或者 externalizable接口的类中包含readResolve则返回true<br>invokeReadResolve:通过<strong>反射</strong>的方式调用要被反序列化的<strong>类的readResolve方法。</strong><br>所以，原理也就清楚了，主要在Singleton中定义readResolve方法，并在该方法中指定要返回的对象的生成策略，就可以防止单例被破坏。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集与拓扑排序</title>
    <link href="/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>并查集：无向图，只有边的概念。<br>UnionFind:<br>拓扑排序：有向图，点有入度和出度。<br>从入度为0的点开始排序（没有前置条件）</p><h2 id="是否有环"><a href="#是否有环" class="headerlink" title="是否有环"></a>是否有环</h2><p><strong>无向图</strong>：并查集，要加入的边，两边的点已经在同一集合了。<br><strong>有向图</strong>：拓扑排序，看是否所有的点的入度都可以消除为0。使用一个<strong>栈</strong>，<strong>保存所有入度&#x3D;0的点</strong>，可以加入结果集，并且用set&#x2F;list保存了当前点的下一个点，由此删除下一个点的入度。<br>如图所示有向图，无环，可以生成一个拓扑排序<br><img src="https://blog-1312805392.cos.ap-nanjing.myqcloud.com/1655877846074-fbee4e22-1345-417a-abf9-80357e663481.png" alt="image.png"><br><strong>示例 1：</strong><br>输入：<br>“1-&gt;2,2-&gt;3,3-&gt;1”<br>输出：<br>true<br><strong>示例 2：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>false<br><strong>示例 3：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>true<br>解释:<br>存在环线:6-&gt;11,11-&gt;10,10-&gt;6<br><strong>提示:</strong></p><ul><li>0 &lt; 节点数 &lt; 100<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeetCode</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        System.out.println(so.hasCycle(<span class="hljs-string">&quot;1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(String graph)</span> &#123;<br>            String[] split = graph.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> split.length;<br>            <span class="hljs-comment">//存所有节点</span><br>            HashSet&lt;Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-comment">//入度</span><br>            <span class="hljs-type">int</span>[] inpoint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//next step,数组</span><br>            HashSet&lt;Integer&gt;[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                String[] strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>                strings = split[i].split(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">0</span>]);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">1</span>]);<br>                node.add(u);<br>                node.add(v);<br><br>                visited[v] = <span class="hljs-literal">true</span>;<br>                visited[u] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//入度</span><br>                inpoint[v]++;<br>                <span class="hljs-keyword">if</span> (list[u] == <span class="hljs-literal">null</span>) &#123;<br>                    list[u] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>                &#125;<br>                <span class="hljs-comment">//邻接表</span><br>                list[u].add(v);<br><br>            &#125;<br>            ArrayDeque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (visited[i] &amp;&amp; inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                    stack.add(i);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//所有入度可减小为0的点，可排序的点</span><br>            ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack.poll();<br>                integers.add(cur);<br>                <span class="hljs-keyword">if</span> (list[cur] != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (Integer i : list[cur]) &#123;<br>                        inpoint[i]--;<br>                        <span class="hljs-keyword">if</span> (inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                            stack.push(i);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> integers.size() &lt; node.size();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="无向图是否存在环"><a href="#无向图是否存在环" class="headerlink" title="无向图是否存在环"></a>无向图是否存在环</h3><p>join的时候，利用find进行路径压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    并查集（union-find, 或disjoint set）可以动态地连通两个点，并且可以非常快速地判断两个</span><br><span class="hljs-comment">点是否连通。</span><br><span class="hljs-comment">    初始化：所有点的母节点为自己</span><br><span class="hljs-comment">    每次要连接节点i 和j 时，我们可以将i 的父亲标为j；</span><br><span class="hljs-comment">    每次要查询两个节点是否相连时，我们可以查找i 和j 的祖先是否最</span><br><span class="hljs-comment">终为同一个人。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1.find：找到祖先</span><br><span class="hljs-comment">    2.same:是否在同一个集合，同一根节点</span><br><span class="hljs-comment">    3.join,将两个节点连在同一节点</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] father;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Solution</span><span class="hljs-params">()</span>&#123;<br>         n=<span class="hljs-number">1005</span>;<br>         father=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            father[i]=i;<span class="hljs-comment">//父节点</span><br>         &#125;<br>     &#125;<br>     <span class="hljs-comment">//找到祖先</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>&#123;<br>         <span class="hljs-keyword">if</span>(u==father[u])<br>         <span class="hljs-keyword">return</span> u;<span class="hljs-comment">//base case:是根</span><br>         father[u]=find(father[u]);<span class="hljs-comment">//迭代找到祖先</span><br>         <span class="hljs-keyword">return</span> father[u];<br>     &#125;<br>     <span class="hljs-comment">//是否在同一集合，同一个根节点，就在同一集合</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">same</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">return</span> u==v;<br>     &#125;<br>     <span class="hljs-comment">//v-&gt;u 这条边加入并查集，调用find,进行路径压缩，直接与连在根节点上</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">if</span>(u==v) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//已经存在</span><br>        father[v]=u;<br>     &#125;<br>     <span class="hljs-comment">//遍历边，如果已经在同一集合，结果又有新边，返回这条新边</span><br>     <span class="hljs-comment">//在并查集加入新边</span><br>     <span class="hljs-comment">//solution不用自己new</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findRedundantConnection(<span class="hljs-type">int</span>[][] edges) &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] line:edges)&#123;<br>            <span class="hljs-keyword">if</span>(same(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> line;<br>            <span class="hljs-keyword">else</span> join(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <url>/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a></h4><p>难度中等1166</p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,1,1,1], target = 3<br>输出：5<br>解释：一共有<span class="hljs-number"> 5 </span>种方法让最终目标和为<span class="hljs-number"> 3 </span>。<br>-1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 -<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>= 3<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//0,1背包问题</span><br>    <span class="hljs-comment">//找到子集为4的集合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTargetSumWays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<br>            sum+=num;<br>        &#125;<br>      <span class="hljs-type">int</span> weight= (sum+target)&gt;&gt;<span class="hljs-number">1</span>;<br><br>      <span class="hljs-keyword">if</span>((sum+target)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> || weight&lt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[weight+<span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<span class="hljs-comment">//枚举i的质量</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=weight;j&gt;=num;j--)&#123;<span class="hljs-comment">//循环背包，--</span><br>                dp[j]+=dp[j-num];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[weight];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>难度中等1213</p><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：数组可以分割成 [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>] 和 [<span class="hljs-number">11</span>] 。<br></code></pre></td></tr></table></figure><p><strong>dp[ i] [j ]:长度为i的数组，可选可不选（0，1），他们的和能组成j,是true还是false</strong></p><p>边界条件：dp [] [0]&#x3D;true,这样状态转移方程中dp[i-1] [j-nums[i]]能等于true.</p><p>也可使用记忆化深度优先搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> dfs(nums,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,sum,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Boolean&gt;());<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[]nums,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> target, HashMap&lt;String,Boolean&gt; map)</span> &#123;<br>    <span class="hljs-comment">//map.put(index+&quot;&quot;+sum,);</span><br>    <span class="hljs-keyword">if</span>(map.containsKey(index+<span class="hljs-string">&quot;&quot;</span>+sum)) &#123;<br>    <span class="hljs-keyword">return</span> map.get(index+<span class="hljs-string">&quot;&quot;</span>+sum);<span class="hljs-comment">//在其他分支中已经算过的，相同的层次，相同的sum</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum*<span class="hljs-number">2</span>==target) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum&gt;target/<span class="hljs-number">2</span> || index&gt;=nums.length) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> partition= dfs(nums,index+<span class="hljs-number">1</span>,sum+nums[index],target,map)||dfs(nums,index+<span class="hljs-number">1</span>,sum,target,map);<br>    map.put(index+<span class="hljs-string">&quot;&quot;</span>+sum, partition);<br>    <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dp:空间压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> target=sum/<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> n=nums.length;<br>    <span class="hljs-type">boolean</span>[]dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[target+<span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//每一个i循环填充一个dp数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=target;j&gt;<span class="hljs-number">0</span>;j--) &#123;<span class="hljs-comment">//倒序遍历，取得上一行（i-1)数值</span><br>    <span class="hljs-keyword">if</span>(j&gt;=nums[i-<span class="hljs-number">1</span>])<br>    dp[j]=dp[j]||dp[j-nums[i-<span class="hljs-number">1</span>]];<br>    <span class="hljs-keyword">else</span> &#123;<br>    dp[j]=dp[j];<br>    &#125;<br>    &#125;<br>    <br>    &#125; <br>    <br>    <span class="hljs-keyword">return</span> dp[target];<br>    <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/rxy8XCv4RASj1Fu.png" alt="image-20220327162656248"></p><p>因为j-nums[i]&lt;j, 所以倒序。若按照从左往右的顺序进行正向遍历，则dp[j-w] 的值在遍历到j 之前就已经被更新成物品i 的值了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>312. 戳气球</title>
    <link href="/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/"/>
    <url>/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/</url>
    
    <content type="html"><![CDATA[<h4 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a><a href="https://leetcode-cn.com/problems/burst-balloons/">312. 戳气球</a></h4><p>难度困难972</p><p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n - 1</code>，每个气球上都标有一个数字，这些数字存在数组 <code>nums</code> 中。</p><p>现在要求你戳破所有的气球。戳破第 <code>i</code> 个气球，你可以获得 <code>nums[i - 1] * nums[i] * nums[i + 1]</code> 枚硬币。 这里的 <code>i - 1</code> 和 <code>i + 1</code> 代表和 <code>i</code> 相邻的两个气球的序号。如果 <code>i - 1</code>或 <code>i + 1</code> 超出了数组的边界，那么就当它是一个数字为 <code>1</code> 的气球。</p><p>求所能获得硬币的最大数量。</p><p><strong>示例 1：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">输入：nums = [3,1,5,8]<br>输出：167<br>解释：<br>nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []<br>coins =  3<span class="hljs-number">*1</span><span class="hljs-number">*5</span>    +   3<span class="hljs-number">*5</span><span class="hljs-number">*8</span>   +  1<span class="hljs-number">*3</span><span class="hljs-number">*8</span>  + 1<span class="hljs-number">*8</span><span class="hljs-number">*1</span> = 167<br></code></pre></td></tr></table></figure><p><strong>思路：</strong>如何找子问题（备忘录）存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *动态规划自底向上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 最后一个爆破的气球可以把左右区间区分开，他们之间没有关联（不会相乘），由此将这个问题分为两个子问题</span><br><span class="hljs-comment"> * dp[i][j]:在i到j之间能得到的最大值，不包括i,j</span><br><span class="hljs-comment"> * 逆向思考：k是最后一个爆破的气球，在(i,j)之间遍历k,取最大值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxCoins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] tmp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>];<br><br>        <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>][n+<span class="hljs-number">2</span>];<br><br>        System.arraycopy(nums,<span class="hljs-number">0</span>,tmp,<span class="hljs-number">1</span>,n);<br>        tmp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        tmp[n+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>n-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">//开区间(i,j)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">2</span>; j &lt;=n+<span class="hljs-number">1</span> ; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; k &lt;j; k++) &#123;<br>                    dp[i][j]=Math.max(dp[i][j],dp[i][k]+dp[k][j]+tmp[k]*tmp[i]*tmp[j]);<br>                    <span class="hljs-comment">//dp[i][k]和dp[k][j]中j&gt;i+1,</span><br>                    <span class="hljs-comment">// 同时因为k&gt;i,所以i要从大到小遍历</span><br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>279.完全平方数</title>
    <link href="/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h4><p>难度中等1288</p><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 12<br>输出：3 <br>解释：12 =<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+ 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">13</span><br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-number">13</span> = <span class="hljs-number">4</span> + <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><p><strong>题解：</strong></p><p><img src="https://s2.loli.net/2022/03/22/Bel2M41DkYdrajQ.png" alt="image-20220322135940585"></p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>213. 打家劫舍 II</title>
    <link href="/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/"/>
    <url>/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/</url>
    
    <content type="html"><![CDATA[<h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II</a></h4><p>难度中等1025</p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2,3,2]<br>输出：3<br>解释：你不能先偷窃<span class="hljs-number"> 1 </span>号房屋（金额 = 2），然后偷窃<span class="hljs-number"> 3 </span>号房屋（金额 = 2）, 因为他们是相邻的。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    环形导致的bug点在于，可能导致第一家和最后一家都偷了。</span><br><span class="hljs-comment">    所以考虑不偷第一家，和不偷最后一家。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    不偷，即初始化为0。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    这两种情况中肯定有一种是最优解。找到其最大值，就是最优解。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> Math.max(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br><br>       dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷0</span><br>       dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//不偷第一家[1,n-1]</span><br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">2</span>]+nums[i]);<span class="hljs-comment">//不偷，偷</span><br>        &#125;<br>        <span class="hljs-type">int</span>[] dp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        dp2[n-<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷n-1</span><br>        dp2[n-<span class="hljs-number">2</span>]=nums[n-<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n-<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//不偷最后一家[0,n-2]</span><br>            dp2[i]=Math.max(dp2[i+<span class="hljs-number">1</span>],dp2[i+<span class="hljs-number">2</span>]+nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(dp[n-<span class="hljs-number">1</span>],dp2[<span class="hljs-number">0</span>]);<br>    &#125;<br>         <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>198.打家劫舍</title>
    <link href="/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/"/>
    <url>/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/</url>
    
    <content type="html"><![CDATA[<ul><li><p>定义子问题</p></li><li><p>写出子问题的递推关系</p></li></ul><p><img src="https://i.loli.net/2021/06/25/LXWskUoR1PhQcTH.png" alt="image-20210625110148870"></p><p><img src="https://i.loli.net/2021/06/25/e18vCugpXQ5hMaq.png" alt="image-20210625110212850"></p><p>画图：子结构</p><p><img src="https://i.loli.net/2021/06/25/3qrtFW1nUhayMdD.png" alt="image-20210625113744123"></p><p><img src="https://i.loli.net/2021/06/25/LkKPqv7GpF2rB1w.png" alt="image-20210625114057234"></p><p>思路：动态规划。</p><ul><li>定义子问题——偷K间房屋能偷到的最大金额: f(K)</li><li>状态转移方程——第K间房屋只有两种选择，偷或者不偷。f(K)&#x3D;max{nums[K-1]+f(K-2),f(K-1)}</li><li>边界条件：没有房屋&amp;只有一间房屋</li></ul><p>TC:O(N)</p><p>SC:O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span>(nums==<span class="hljs-literal">null</span>||nums.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> N=nums.length;<br>        <span class="hljs-type">int</span>[] dp= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)&#123;<br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],nums[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]);<span class="hljs-comment">//自底向上，dp[i]：偷前i间最大金额</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[N];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2226.每个小孩最多能分多少糖果</title>
    <link href="/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <url>/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="2226-每个小孩最多能分到多少糖果"><a href="#2226-每个小孩最多能分到多少糖果" class="headerlink" title="2226. 每个小孩最多能分到多少糖果"></a><a href="https://leetcode-cn.com/problems/maximum-candies-allocated-to-k-children/">2226. 每个小孩最多能分到多少糖果</a></h4><p>难度中等18</p><p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>candies</code> 。数组中的每个元素表示大小为 <code>candies[i]</code> 的一堆糖果。你可以将每堆糖果分成任意数量的 <strong>子堆</strong> ，但 <strong>无法</strong> 再将两堆合并到一起。</p><p>另给你一个整数 <code>k</code> 。你需要将这些糖果分配给 <code>k</code> 个小孩，使每个小孩分到 <strong>相同</strong> 数量的糖果。每个小孩可以拿走 <strong>至多一堆</strong> 糖果，有些糖果可能会不被分配。</p><p>返回每个小孩可以拿走的 <strong>最大糖果数目</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumCandies</span><span class="hljs-params">(<span class="hljs-type">int</span>[] candies, <span class="hljs-type">long</span> k)</span> &#123;<br>       <br>        <span class="hljs-type">long</span> max=(<span class="hljs-type">long</span>)<span class="hljs-number">1e7</span>;<br>      <span class="hljs-comment">//  int min=candies[0];</span><br>     <span class="hljs-type">long</span> left=-<span class="hljs-number">1</span>; <span class="hljs-type">long</span> right=max+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left+<span class="hljs-number">1</span>!=right)&#123;<span class="hljs-comment">// </span><br>            <span class="hljs-type">long</span> mid=left+(right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-type">long</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:candies)&#123;<br>                count+=num/mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count&lt;k) right=mid;<br>            <span class="hljs-keyword">else</span> left=mid;足条件的最大值<br>           <br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)left;<span class="hljs-comment">//返回Left</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

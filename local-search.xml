<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>并查集与拓扑排序</title>
    <link href="/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>并查集：无向图，只有边的概念。<br>UnionFind:<br>拓扑排序：有向图，点有入度和出度。<br>从入度为0的点开始排序（没有前置条件）</p><h2 id="是否有环"><a href="#是否有环" class="headerlink" title="是否有环"></a>是否有环</h2><p><strong>无向图</strong>：并查集，要加入的边，两边的点已经在同一集合了。<br><strong>有向图</strong>：拓扑排序，看是否所有的点的入度都可以消除为0。使用一个<strong>栈</strong>，<strong>保存所有入度&#x3D;0的点</strong>，可以加入结果集，并且用set&#x2F;list保存了当前点的下一个点，由此删除下一个点的入度。<br>如图所示有向图，无环，可以生成一个拓扑排序<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655877846074-fbee4e22-1345-417a-abf9-80357e663481.png#clientId=u32357f19-3fbb-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue321703a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=488&originWidth=919&originalType=url&ratio=1&rotation=0&showTitle=false&size=82357&status=done&style=none&taskId=u1e1b1448-c1e2-44f5-b7e2-0127ddce348&title=" alt="image.png"><br><strong>示例 1：</strong><br>输入：<br>“1-&gt;2,2-&gt;3,3-&gt;1”<br>输出：<br>true<br><strong>示例 2：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>false<br><strong>示例 3：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>true<br>解释:<br>存在环线:6-&gt;11,11-&gt;10,10-&gt;6<br><strong>提示:</strong></p><ul><li>0 &lt; 节点数 &lt; 100<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeetCode</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        System.out.println(so.hasCycle(<span class="hljs-string">&quot;1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(String graph)</span> &#123;<br>            String[] split = graph.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> split.length;<br>            <span class="hljs-comment">//存所有节点</span><br>            HashSet&lt;Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-comment">//入度</span><br>            <span class="hljs-type">int</span>[] inpoint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//next step,数组</span><br>            HashSet&lt;Integer&gt;[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                String[] strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>                strings = split[i].split(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">0</span>]);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">1</span>]);<br>                node.add(u);<br>                node.add(v);<br><br>                visited[v] = <span class="hljs-literal">true</span>;<br>                visited[u] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//入度</span><br>                inpoint[v]++;<br>                <span class="hljs-keyword">if</span> (list[u] == <span class="hljs-literal">null</span>) &#123;<br>                    list[u] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>                &#125;<br>                <span class="hljs-comment">//邻接表</span><br>                list[u].add(v);<br><br>            &#125;<br>            ArrayDeque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (visited[i] &amp;&amp; inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                    stack.add(i);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//所有入度可减小为0的点，可排序的点</span><br>            ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack.poll();<br>                integers.add(cur);<br>                <span class="hljs-keyword">if</span> (list[cur] != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (Integer i : list[cur]) &#123;<br>                        inpoint[i]--;<br>                        <span class="hljs-keyword">if</span> (inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                            stack.push(i);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> integers.size() &lt; node.size();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="无向图是否存在环"><a href="#无向图是否存在环" class="headerlink" title="无向图是否存在环"></a>无向图是否存在环</h3><p>join的时候，利用find进行路径压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    并查集（union-find, 或disjoint set）可以动态地连通两个点，并且可以非常快速地判断两个</span><br><span class="hljs-comment">点是否连通。</span><br><span class="hljs-comment">    初始化：所有点的母节点为自己</span><br><span class="hljs-comment">    每次要连接节点i 和j 时，我们可以将i 的父亲标为j；</span><br><span class="hljs-comment">    每次要查询两个节点是否相连时，我们可以查找i 和j 的祖先是否最</span><br><span class="hljs-comment">终为同一个人。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1.find：找到祖先</span><br><span class="hljs-comment">    2.same:是否在同一个集合，同一根节点</span><br><span class="hljs-comment">    3.join,将两个节点连在同一节点</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] father;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Solution</span><span class="hljs-params">()</span>&#123;<br>         n=<span class="hljs-number">1005</span>;<br>         father=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            father[i]=i;<span class="hljs-comment">//父节点</span><br>         &#125;<br>     &#125;<br>     <span class="hljs-comment">//找到祖先</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>&#123;<br>         <span class="hljs-keyword">if</span>(u==father[u])<br>         <span class="hljs-keyword">return</span> u;<span class="hljs-comment">//base case:是根</span><br>         father[u]=find(father[u]);<span class="hljs-comment">//迭代找到祖先</span><br>         <span class="hljs-keyword">return</span> father[u];<br>     &#125;<br>     <span class="hljs-comment">//是否在同一集合，同一个根节点，就在同一集合</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">same</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">return</span> u==v;<br>     &#125;<br>     <span class="hljs-comment">//v-&gt;u 这条边加入并查集，调用find,进行路径压缩，直接与连在根节点上</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">if</span>(u==v) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//已经存在</span><br>        father[v]=u;<br>     &#125;<br>     <span class="hljs-comment">//遍历边，如果已经在同一集合，结果又有新边，返回这条新边</span><br>     <span class="hljs-comment">//在并查集加入新边</span><br>     <span class="hljs-comment">//solution不用自己new</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findRedundantConnection(<span class="hljs-type">int</span>[][] edges) &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] line:edges)&#123;<br>            <span class="hljs-keyword">if</span>(same(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> line;<br>            <span class="hljs-keyword">else</span> join(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <url>/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a></h4><p>难度中等1166</p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,1,1,1], target = 3<br>输出：5<br>解释：一共有<span class="hljs-number"> 5 </span>种方法让最终目标和为<span class="hljs-number"> 3 </span>。<br>-1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 -<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>= 3<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//0,1背包问题</span><br>    <span class="hljs-comment">//找到子集为4的集合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTargetSumWays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<br>            sum+=num;<br>        &#125;<br>      <span class="hljs-type">int</span> weight= (sum+target)&gt;&gt;<span class="hljs-number">1</span>;<br><br>      <span class="hljs-keyword">if</span>((sum+target)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> || weight&lt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[weight+<span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<span class="hljs-comment">//枚举i的质量</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=weight;j&gt;=num;j--)&#123;<span class="hljs-comment">//循环背包，--</span><br>                dp[j]+=dp[j-num];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[weight];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>难度中等1213</p><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：数组可以分割成 [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>] 和 [<span class="hljs-number">11</span>] 。<br></code></pre></td></tr></table></figure><p><strong>dp[ i] [j ]:长度为i的数组，可选可不选（0，1），他们的和能组成j,是true还是false</strong></p><p>边界条件：dp [] [0]&#x3D;true,这样状态转移方程中dp[i-1] [j-nums[i]]能等于true.</p><p>也可使用记忆化深度优先搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> dfs(nums,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,sum,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Boolean&gt;());<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[]nums,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> target, HashMap&lt;String,Boolean&gt; map)</span> &#123;<br>    <span class="hljs-comment">//map.put(index+&quot;&quot;+sum,);</span><br>    <span class="hljs-keyword">if</span>(map.containsKey(index+<span class="hljs-string">&quot;&quot;</span>+sum)) &#123;<br>    <span class="hljs-keyword">return</span> map.get(index+<span class="hljs-string">&quot;&quot;</span>+sum);<span class="hljs-comment">//在其他分支中已经算过的，相同的层次，相同的sum</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum*<span class="hljs-number">2</span>==target) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum&gt;target/<span class="hljs-number">2</span> || index&gt;=nums.length) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> partition= dfs(nums,index+<span class="hljs-number">1</span>,sum+nums[index],target,map)||dfs(nums,index+<span class="hljs-number">1</span>,sum,target,map);<br>    map.put(index+<span class="hljs-string">&quot;&quot;</span>+sum, partition);<br>    <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dp:空间压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> target=sum/<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> n=nums.length;<br>    <span class="hljs-type">boolean</span>[]dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[target+<span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//每一个i循环填充一个dp数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=target;j&gt;<span class="hljs-number">0</span>;j--) &#123;<span class="hljs-comment">//倒序遍历，取得上一行（i-1)数值</span><br>    <span class="hljs-keyword">if</span>(j&gt;=nums[i-<span class="hljs-number">1</span>])<br>    dp[j]=dp[j]||dp[j-nums[i-<span class="hljs-number">1</span>]];<br>    <span class="hljs-keyword">else</span> &#123;<br>    dp[j]=dp[j];<br>    &#125;<br>    &#125;<br>    <br>    &#125; <br>    <br>    <span class="hljs-keyword">return</span> dp[target];<br>    <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/rxy8XCv4RASj1Fu.png" alt="image-20220327162656248"></p><p>因为j-nums[i]&lt;j, 所以倒序。若按照从左往右的顺序进行正向遍历，则dp[j-w] 的值在遍历到j 之前就已经被更新成物品i 的值了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>312. 戳气球</title>
    <link href="/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/"/>
    <url>/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/</url>
    
    <content type="html"><![CDATA[<h4 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a><a href="https://leetcode-cn.com/problems/burst-balloons/">312. 戳气球</a></h4><p>难度困难972</p><p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n - 1</code>，每个气球上都标有一个数字，这些数字存在数组 <code>nums</code> 中。</p><p>现在要求你戳破所有的气球。戳破第 <code>i</code> 个气球，你可以获得 <code>nums[i - 1] * nums[i] * nums[i + 1]</code> 枚硬币。 这里的 <code>i - 1</code> 和 <code>i + 1</code> 代表和 <code>i</code> 相邻的两个气球的序号。如果 <code>i - 1</code>或 <code>i + 1</code> 超出了数组的边界，那么就当它是一个数字为 <code>1</code> 的气球。</p><p>求所能获得硬币的最大数量。</p><p><strong>示例 1：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">输入：nums = [3,1,5,8]<br>输出：167<br>解释：<br>nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []<br>coins =  3<span class="hljs-number">*1</span><span class="hljs-number">*5</span>    +   3<span class="hljs-number">*5</span><span class="hljs-number">*8</span>   +  1<span class="hljs-number">*3</span><span class="hljs-number">*8</span>  + 1<span class="hljs-number">*8</span><span class="hljs-number">*1</span> = 167<br></code></pre></td></tr></table></figure><p><strong>思路：</strong>如何找子问题（备忘录）存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *动态规划自底向上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 最后一个爆破的气球可以把左右区间区分开，他们之间没有关联（不会相乘），由此将这个问题分为两个子问题</span><br><span class="hljs-comment"> * dp[i][j]:在i到j之间能得到的最大值，不包括i,j</span><br><span class="hljs-comment"> * 逆向思考：k是最后一个爆破的气球，在(i,j)之间遍历k,取最大值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxCoins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] tmp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>];<br><br>        <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>][n+<span class="hljs-number">2</span>];<br><br>        System.arraycopy(nums,<span class="hljs-number">0</span>,tmp,<span class="hljs-number">1</span>,n);<br>        tmp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        tmp[n+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>n-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">//开区间(i,j)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">2</span>; j &lt;=n+<span class="hljs-number">1</span> ; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; k &lt;j; k++) &#123;<br>                    dp[i][j]=Math.max(dp[i][j],dp[i][k]+dp[k][j]+tmp[k]*tmp[i]*tmp[j]);<br>                    <span class="hljs-comment">//dp[i][k]和dp[k][j]中j&gt;i+1,</span><br>                    <span class="hljs-comment">// 同时因为k&gt;i,所以i要从大到小遍历</span><br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>279.完全平方数</title>
    <link href="/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h4><p>难度中等1288</p><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 12<br>输出：3 <br>解释：12 =<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+ 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">13</span><br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-number">13</span> = <span class="hljs-number">4</span> + <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><p><strong>题解：</strong></p><p><img src="https://s2.loli.net/2022/03/22/Bel2M41DkYdrajQ.png" alt="image-20220322135940585"></p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>213. 打家劫舍 II</title>
    <link href="/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/"/>
    <url>/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/</url>
    
    <content type="html"><![CDATA[<h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II</a></h4><p>难度中等1025</p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2,3,2]<br>输出：3<br>解释：你不能先偷窃<span class="hljs-number"> 1 </span>号房屋（金额 = 2），然后偷窃<span class="hljs-number"> 3 </span>号房屋（金额 = 2）, 因为他们是相邻的。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    环形导致的bug点在于，可能导致第一家和最后一家都偷了。</span><br><span class="hljs-comment">    所以考虑不偷第一家，和不偷最后一家。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    不偷，即初始化为0。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    这两种情况中肯定有一种是最优解。找到其最大值，就是最优解。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> Math.max(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br><br>       dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷0</span><br>       dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//不偷第一家[1,n-1]</span><br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">2</span>]+nums[i]);<span class="hljs-comment">//不偷，偷</span><br>        &#125;<br>        <span class="hljs-type">int</span>[] dp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        dp2[n-<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷n-1</span><br>        dp2[n-<span class="hljs-number">2</span>]=nums[n-<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n-<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//不偷最后一家[0,n-2]</span><br>            dp2[i]=Math.max(dp2[i+<span class="hljs-number">1</span>],dp2[i+<span class="hljs-number">2</span>]+nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(dp[n-<span class="hljs-number">1</span>],dp2[<span class="hljs-number">0</span>]);<br>    &#125;<br>         <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>198.打家劫舍</title>
    <link href="/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/"/>
    <url>/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/</url>
    
    <content type="html"><![CDATA[<ul><li><p>定义子问题</p></li><li><p>写出子问题的递推关系</p></li></ul><p><img src="https://i.loli.net/2021/06/25/LXWskUoR1PhQcTH.png" alt="image-20210625110148870"></p><p><img src="https://i.loli.net/2021/06/25/e18vCugpXQ5hMaq.png" alt="image-20210625110212850"></p><p>画图：子结构</p><p><img src="https://i.loli.net/2021/06/25/3qrtFW1nUhayMdD.png" alt="image-20210625113744123"></p><p><img src="https://i.loli.net/2021/06/25/LkKPqv7GpF2rB1w.png" alt="image-20210625114057234"></p><p>思路：动态规划。</p><ul><li>定义子问题——偷K间房屋能偷到的最大金额: f(K)</li><li>状态转移方程——第K间房屋只有两种选择，偷或者不偷。f(K)&#x3D;max{nums[K-1]+f(K-2),f(K-1)}</li><li>边界条件：没有房屋&amp;只有一间房屋</li></ul><p>TC:O(N)</p><p>SC:O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span>(nums==<span class="hljs-literal">null</span>||nums.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> N=nums.length;<br>        <span class="hljs-type">int</span>[] dp= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)&#123;<br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],nums[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]);<span class="hljs-comment">//自底向上，dp[i]：偷前i间最大金额</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[N];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2226.每个小孩最多能分多少糖果</title>
    <link href="/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <url>/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="2226-每个小孩最多能分到多少糖果"><a href="#2226-每个小孩最多能分到多少糖果" class="headerlink" title="2226. 每个小孩最多能分到多少糖果"></a><a href="https://leetcode-cn.com/problems/maximum-candies-allocated-to-k-children/">2226. 每个小孩最多能分到多少糖果</a></h4><p>难度中等18</p><p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>candies</code> 。数组中的每个元素表示大小为 <code>candies[i]</code> 的一堆糖果。你可以将每堆糖果分成任意数量的 <strong>子堆</strong> ，但 <strong>无法</strong> 再将两堆合并到一起。</p><p>另给你一个整数 <code>k</code> 。你需要将这些糖果分配给 <code>k</code> 个小孩，使每个小孩分到 <strong>相同</strong> 数量的糖果。每个小孩可以拿走 <strong>至多一堆</strong> 糖果，有些糖果可能会不被分配。</p><p>返回每个小孩可以拿走的 <strong>最大糖果数目</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumCandies</span><span class="hljs-params">(<span class="hljs-type">int</span>[] candies, <span class="hljs-type">long</span> k)</span> &#123;<br>       <br>        <span class="hljs-type">long</span> max=(<span class="hljs-type">long</span>)<span class="hljs-number">1e7</span>;<br>      <span class="hljs-comment">//  int min=candies[0];</span><br>     <span class="hljs-type">long</span> left=-<span class="hljs-number">1</span>; <span class="hljs-type">long</span> right=max+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left+<span class="hljs-number">1</span>!=right)&#123;<span class="hljs-comment">// </span><br>            <span class="hljs-type">long</span> mid=left+(right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-type">long</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:candies)&#123;<br>                count+=num/mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count&lt;k) right=mid;<br>            <span class="hljs-keyword">else</span> left=mid;足条件的最大值<br>           <br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)left;<span class="hljs-comment">//返回Left</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

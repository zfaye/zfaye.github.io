<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第80场双周赛 TP-Link</title>
    <link href="/2022/06/25/%E7%AC%AC80%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9BTP-Link/"/>
    <url>/2022/06/25/%E7%AC%AC80%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9BTP-Link/</url>
    
    <content type="html"><![CDATA[<p>前两题略</p><h4 id="2301-替换字符后匹配"><a href="#2301-替换字符后匹配" class="headerlink" title="2301. 替换字符后匹配"></a><a href="https://leetcode.cn/problems/match-substring-after-replacement/">2301. 替换字符后匹配</a></h4><p>难度困难10收藏分享切换为英文接收动态反馈<br>给你两个字符串 s 和 sub 。同时给你一个二维字符数组 mappings ，其中 mappings[i] &#x3D; [oldi, newi] 表示你可以将 sub 中任意数目的 oldi 字符替换为 newi 。sub 中每个字符 <strong>不能</strong> 被替换超过一次。<br>如果使用 mappings 替换 0 个或者若干个字符，可以将 sub 变成 s 的一个子字符串，请你返回 true，否则返回 false 。<br>一个 <strong>子字符串</strong> 是字符串中连续非空的字符序列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s &#x3D; “fool3e7bar”, sub &#x3D; “leet”, mappings &#x3D; [[“e”,”3”],[“t”,”7”],[“t”,”8”]] <strong>输出：</strong>true <strong>解释：</strong>将 sub 中第一个 ‘e’ 用 ‘3’ 替换，将 ‘t’ 用 ‘7’ 替换。 现在 sub &#x3D; “l3e7” ，它是 s 的子字符串，所以我们返回 true 。</p><p><strong>思路</strong>：使用一个boolean[][] vis 数组，记录mapppings映射关系。（或者使用HashMap&lt;Character, set<Character>&gt;);<br>           时间复杂度：O（mn), 先找到s 字符串中的起始点，再开始遍历字符串sub.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matchReplacement</span><span class="hljs-params">(String s, String sub, <span class="hljs-type">char</span>[][] mappings)</span> &#123;<br>            <span class="hljs-type">boolean</span>[][] vis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">128</span>][<span class="hljs-number">128</span>];<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings.length; i++) &#123;<br>               vis[mappings[i][<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>][mappings[i][<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-literal">true</span>;<br>           &#125;<br><br>           <span class="hljs-comment">//</span><br>           <span class="hljs-type">char</span> start=sub.charAt(<span class="hljs-number">0</span>);<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length() &amp;&amp; i+sub.length()-<span class="hljs-number">1</span>&lt;s.length(); i++) &#123;<br>               <span class="hljs-type">char</span> c=s.charAt(i);<br>               <span class="hljs-keyword">if</span>(c==start || vis[start-<span class="hljs-string">&#x27;0&#x27;</span>][c-<span class="hljs-string">&#x27;0&#x27;</span>])&#123;<br>                   <span class="hljs-keyword">if</span>(match(s.substring(i+<span class="hljs-number">1</span>),sub.substring(<span class="hljs-number">1</span>),vis))&#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>       &#125;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(String s, String sub, <span class="hljs-type">boolean</span>[][] vis)</span>&#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sub.length(); i++) &#123;<br>               <span class="hljs-keyword">if</span>(s.charAt(i)!=sub.charAt(i) &amp;&amp; !vis[sub.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>][s.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>])&#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br><br><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2302-统计得分小于-K-的子数组数目"><a href="#2302-统计得分小于-K-的子数组数目" class="headerlink" title="2302. 统计得分小于 K 的子数组数目"></a><a href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/">2302. 统计得分小于 K 的子数组数目</a></h4><p>难度困难9收藏分享切换为英文接收动态反馈<br>一个数字的 <strong>分数</strong> 定义为数组之和 <strong>乘以</strong> 数组的长度。</p><ul><li>比方说，[1, 2, 3, 4, 5] 的分数为 (1 + 2 + 3 + 4 + 5) * 5 &#x3D; 75 。</li></ul><p>给你一个正整数数组 nums 和一个整数 k ，请你返回 nums 中分数 **严格小于 **k 的 <strong>非空整数子数组数目</strong>。<br><strong>子数组 是数组中的一个连续元素序列。————&gt;滑动窗口</strong></p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums &#x3D; [2,1,4,3,5], k &#x3D; 10 <strong>输出：</strong>6 <strong>解释：</strong> 有 6 个子数组的分数小于 10 ： - [2] 分数为 2 * 1 &#x3D; 2 。 - [1] 分数为 1 * 1 &#x3D; 1 。 - [4] 分数为 4 * 1 &#x3D; 4 。 - [3] 分数为 3 * 1 &#x3D; 3 。  - [5] 分数为 5 * 1 &#x3D; 5 。 - [2,1] 分数为 (2 + 1) * 2 &#x3D; 6 。 注意，子数组 [1,4] 和 [4,3,5] 不符合要求，因为它们的分数分别为 10 和 36，但我们要求子数组的分数严格小于 10 。</p><p><strong>思路</strong>：滑动窗口，右拉左。<br>时间复杂度：O（n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSubarrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">long</span> k)</span> &#123;<br>        <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> sum=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//left和right组成的滑动窗口</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left=<span class="hljs-number">0</span>, right=<span class="hljs-number">0</span>;right&lt;nums.length;right++)&#123;<br>            <br>            sum+=nums[right];<br>            <br>            <span class="hljs-comment">//左边界右移</span><br>            <span class="hljs-keyword">while</span>(sum*(right-left+<span class="hljs-number">1</span>)&gt;=k)&#123;<br>                sum-=nums[left];<br>                left++;<br>            &#125;<br>            <span class="hljs-comment">//计算当前左，右边界，满足条件的所有子数组</span><br>            ans+=right-left+<span class="hljs-number">1</span>;  <br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>周赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/06/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>懒汉式——线程不安全、线程安全、DCL（锁的优化）<br>饿汉式<br>静态内部类<br>枚举</p><p>应用场景：JDK中runtime类，spring里bean默认单例</p><h1 id="1、懒汉式，线程不安全"><a href="#1、懒汉式，线程不安全" class="headerlink" title="1、懒汉式，线程不安全"></a>1、懒汉式，线程不安全</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>否<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <br>    <span class="hljs-comment">//public接口返回实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p><h1 id="2、懒汉式，线程安全"><a href="#2、懒汉式，线程安全" class="headerlink" title="2、懒汉式，线程安全"></a>2、懒汉式，线程安全</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。优点：第一次调用才初始化，避免内存浪费。缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、饿汉式"><a href="#3、饿汉式" class="headerlink" title="3、饿汉式"></a>3、饿汉式</h1><p><strong>是否 Lazy 初始化：</strong>否<br><strong>是否多线程安全：</strong>是，由JVM类加载机制保证。<br><strong>实现难度：</strong>易<br><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。优点：没有加锁，执行效率会提高。缺点：类加载时就初始化，浪费内存。它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p><blockquote><p>类的加载过程：<br>1.加载<br>2.链接：a.   验证      b.准备（给类的静态成员变量赋默认值） c.解析<br>3.初始化：类静态成员变量初始化</p></blockquote><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、双检锁-x2F-双重校验锁（DCL，即-double-checked-locking）"><a href="#4、双检锁-x2F-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="4、双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）"></a>4、双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）</h1><p><strong>JDK 版本：</strong>JDK1.5 起<br><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>较复杂，同步代码块<br><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * double checked lock 懒汉式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br>    <span class="hljs-comment">//volatile禁止指令重排</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> SingletonDemo instance=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//减小锁的粒度</span><br>        <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonDemo.class)&#123;<br>                <span class="hljs-comment">//保证同步</span><br>                <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>                    instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//另外一个线程会拿到未初始化的实例</span><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为什么DCL要使用volatile"><a href="#为什么DCL要使用volatile" class="headerlink" title="为什么DCL要使用volatile"></a>为什么DCL要使用volatile</h4><p>DCL（双端检锁）机制不一定是线程安全的，原因是有指令重排的存在，加入volatile可以禁止指令重排<br>原因是在某一个线程执行到第一次检测的时候，读取到 instance 不为null，instance的引用对象可能没有完成实例化。因为instance &#x3D; new SingletonDemo()；可以分为以下三步进行完成：</p><ul><li>memory &#x3D; allocate(); &#x2F;&#x2F; 1、分配对象内存空间</li><li>instance(memory); &#x2F;&#x2F; 2、初始化对象</li><li>instance &#x3D; memory; &#x2F;&#x2F; 3、设置instance指向刚刚分配的内存地址，此时instance !&#x3D; null</li></ul><p>但是我们通过上面的三个步骤，能够发现，步骤2 和 步骤3之间不存在 数据依赖关系，而且无论重排前 还是重排后，程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。<br>顺序的情况下，new指令申请了一块内存空间，invokespecial调用构造方法为对象进行初始化，astore_1将变量和新创建的对象关联起来。但是invokespecial和astore_1这两条指令没有关联性，所以astore_1有可能会跑到invokespecial前面执行。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655909858776-f217a882-c30d-4597-8886-f9dae2e2cfff.png#clientId=u22564a2f-8e19-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc3b94206&margin=%5Bobject%20Object%5D&name=image.png&originHeight=618&originWidth=1078&originalType=url&ratio=1&rotation=0&showTitle=false&size=124241&status=done&style=none&taskId=u707058eb-44c0-455d-b7f7-aa30c6581f6&title=" alt="image.png"><br>如图，假设两个线程，线程1执行完astore_1时(此时instance已经指向一块内存地址，不为null，但是对象还未完成初始化)，CPU切换到线程2执行if(instance&#x3D;&#x3D;null)，结果为false，于是返回了一个不完整的对象。使用volatile禁止指令重排就可以避免这种情况发生。</p><h1 id="5、登记式-x2F-静态内部类"><a href="#5、登记式-x2F-静态内部类" class="headerlink" title="5、登记式&#x2F;静态内部类"></a>5、登记式&#x2F;静态内部类</h1><p><strong>是否 Lazy 初始化：</strong>是<br><strong>是否多线程安全：</strong>是<br><strong>实现难度：</strong>一般<br><strong>描述：</strong>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，<strong>只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类</strong>，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon</span> &#123;<br>    <span class="hljs-comment">//创建私有的构造方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleTon</span><span class="hljs-params">()</span>&#123;<br> <br>    &#125;<br>    <span class="hljs-comment">//2.在类内部创建一个对象，不使用静态内部类的成员不会加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Holder</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingleTon</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleTon</span>();<br>    &#125;<br>    <span class="hljs-comment">//3.定义一个公开的方法来获得单例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleTon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//静态类直接通过类调用</span><br>        <span class="hljs-keyword">return</span> Holder.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6. 枚举"></a>6. 枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>     INSTANCE;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">businessMethod</span><span class="hljs-params">()</span> &#123;<br>          System.out.println(<span class="hljs-string">&quot;我是一个单例！&quot;</span>);<br>     &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用枚举类对象</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        System.out.println(s1==s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射机制破解单例模式（枚举除外）："><a href="#反射机制破解单例模式（枚举除外）：" class="headerlink" title="反射机制破解单例模式（枚举除外）："></a>反射机制破解单例模式（枚举除外）：</h1><p>通过反射拿到私有的构造器</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655954365715-e7d9a655-ca3f-4769-8d28-dc8c18f34e36.png#clientId=u7dc15063-1db3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=551&id=ue8f9c842&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=1723&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264772&status=done&style=none&taskId=u7d897b87-0b9c-4963-93b6-0a5b3fdc2f1&title=&width=1914.4444951599041" alt="image.png"></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakSingleton</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throw</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Singleton&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br><br>        c.setAccessible(<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//构造器c.newInstance()</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> c.newInstance();<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> c.newInstance();<br>        <span class="hljs-comment">//通过反射，得到的两个不同对象</span><br>        System.out.println(s1);<br>        System.out.println(s2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 如何避免以上的漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(); <br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在构造器中加个逻辑判断,多次调用,抛出异常</span><br>        <span class="hljs-keyword">if</span>(instance!= <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>()<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化，反序列化破坏"><a href="#序列化，反序列化破坏" class="headerlink" title="序列化，反序列化破坏"></a>序列化，反序列化破坏</h1><p>序列化会通过反射调用无参数的构造方法创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hollis;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by hollis on 16/2/5.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableDemo1</span> &#123;<br>    <span class="hljs-comment">//为了便于理解，忽略关闭流操作及删除文件操作。真正编码时千万不要忘记</span><br>    <span class="hljs-comment">//Exception直接抛出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//Write Obj to file</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;tempFile&quot;</span>));<br>        oos.writeObject(Singleton.getSingleton());<br>        <span class="hljs-comment">//Read Obj from file</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;tempFile&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">newInstance</span> <span class="hljs-operator">=</span> (Singleton) ois.readObject();<br>        <span class="hljs-comment">//判断是否是同一个对象</span><br>        System.out.println(newInstance == Singleton.getSingleton());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>isInstantiable：如果一个serializable&#x2F;externalizable的类可以在运行时被实例化，那么该方法就返回true。<br>desc.newInstance：该方法通过反射的方式调用无参构造方法新建一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj;<br><span class="hljs-keyword">try</span> &#123;<br>    obj = desc.isInstantiable() ? desc.newInstance() : <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>    <span class="hljs-keyword">throw</span> (IOException) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(desc.forClass().getName(),<span class="hljs-string">&quot;unable to create instance&quot;</span>).initCause(ex);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何避免实现序列化单例模式的漏洞："><a href="#如何避免实现序列化单例模式的漏洞：" class="headerlink" title="如何避免实现序列化单例模式的漏洞："></a>如何避免实现序列化单例模式的漏洞：</h3><p>先给出解决方案，然后再具体分析原理：<br>只要在Singleton类中定义readResolve就可以解决该问题：<br>应用：currency类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hollis;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by hollis on 16/2/5.</span><br><span class="hljs-comment"> * 使用双重校验锁方式实现单例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <br>   <span class="hljs-comment">//返回单例</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span> &amp;&amp;<br>            handles.lookupException(passHandle) == <span class="hljs-literal">null</span> &amp;&amp;<br>            desc.hasReadResolveMethod())<br>        &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">rep</span> <span class="hljs-operator">=</span> desc.invokeReadResolve(obj);<br>            <span class="hljs-keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;<br>                rep = cloneArray(rep);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (rep != obj) &#123;<br>                handles.setObject(passHandle, obj = rep);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>hasReadResolveMethod:如果实现了serializable 或者 externalizable接口的类中包含readResolve则返回true<br>invokeReadResolve:通过<strong>反射</strong>的方式调用要被反序列化的<strong>类的readResolve方法。</strong><br>所以，原理也就清楚了，主要在Singleton中定义readResolve方法，并在该方法中指定要返回的对象的生成策略，就可以防止单例被破坏。</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集与拓扑排序</title>
    <link href="/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/06/22/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>并查集：无向图，只有边的概念。<br>UnionFind:<br>拓扑排序：有向图，点有入度和出度。<br>从入度为0的点开始排序（没有前置条件）</p><h2 id="是否有环"><a href="#是否有环" class="headerlink" title="是否有环"></a>是否有环</h2><p><strong>无向图</strong>：并查集，要加入的边，两边的点已经在同一集合了。<br><strong>有向图</strong>：拓扑排序，看是否所有的点的入度都可以消除为0。使用一个<strong>栈</strong>，<strong>保存所有入度&#x3D;0的点</strong>，可以加入结果集，并且用set&#x2F;list保存了当前点的下一个点，由此删除下一个点的入度。<br>如图所示有向图，无环，可以生成一个拓扑排序<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29177731/1655877846074-fbee4e22-1345-417a-abf9-80357e663481.png#clientId=u32357f19-3fbb-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue321703a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=488&originWidth=919&originalType=url&ratio=1&rotation=0&showTitle=false&size=82357&status=done&style=none&taskId=u1e1b1448-c1e2-44f5-b7e2-0127ddce348&title=" alt="image.png"><br><strong>示例 1：</strong><br>输入：<br>“1-&gt;2,2-&gt;3,3-&gt;1”<br>输出：<br>true<br><strong>示例 2：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>false<br><strong>示例 3：</strong><br>输入：<br>“1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14”<br>输出：<br>true<br>解释:<br>存在环线:6-&gt;11,11-&gt;10,10-&gt;6<br><strong>提示:</strong></p><ul><li>0 &lt; 节点数 &lt; 100<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeetCode</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        System.out.println(so.hasCycle(<span class="hljs-string">&quot;1-&gt;4,2-&gt;5,3-&gt;6,3-&gt;7,4-&gt;8,5-&gt;8,5-&gt;9,6-&gt;9,6-&gt;11,7-&gt;11,8-&gt;12,9-&gt;12,9-&gt;13,10-&gt;6,10-&gt;13,10-&gt;14,11-&gt;10,11-&gt;14&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(String graph)</span> &#123;<br>            String[] split = graph.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> split.length;<br>            <span class="hljs-comment">//存所有节点</span><br>            HashSet&lt;Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-comment">//入度</span><br>            <span class="hljs-type">int</span>[] inpoint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//next step,数组</span><br>            HashSet&lt;Integer&gt;[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>];<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                String[] strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>                strings = split[i].split(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">0</span>]);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> Integer.parseInt(strings[<span class="hljs-number">1</span>]);<br>                node.add(u);<br>                node.add(v);<br><br>                visited[v] = <span class="hljs-literal">true</span>;<br>                visited[u] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//入度</span><br>                inpoint[v]++;<br>                <span class="hljs-keyword">if</span> (list[u] == <span class="hljs-literal">null</span>) &#123;<br>                    list[u] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>                &#125;<br>                <span class="hljs-comment">//邻接表</span><br>                list[u].add(v);<br><br>            &#125;<br>            ArrayDeque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (visited[i] &amp;&amp; inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                    stack.add(i);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//所有入度可减小为0的点，可排序的点</span><br>            ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack.poll();<br>                integers.add(cur);<br>                <span class="hljs-keyword">if</span> (list[cur] != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (Integer i : list[cur]) &#123;<br>                        inpoint[i]--;<br>                        <span class="hljs-keyword">if</span> (inpoint[i] == <span class="hljs-number">0</span>) &#123;<br>                            stack.push(i);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> integers.size() &lt; node.size();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="无向图是否存在环"><a href="#无向图是否存在环" class="headerlink" title="无向图是否存在环"></a>无向图是否存在环</h3><p>join的时候，利用find进行路径压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    并查集（union-find, 或disjoint set）可以动态地连通两个点，并且可以非常快速地判断两个</span><br><span class="hljs-comment">点是否连通。</span><br><span class="hljs-comment">    初始化：所有点的母节点为自己</span><br><span class="hljs-comment">    每次要连接节点i 和j 时，我们可以将i 的父亲标为j；</span><br><span class="hljs-comment">    每次要查询两个节点是否相连时，我们可以查找i 和j 的祖先是否最</span><br><span class="hljs-comment">终为同一个人。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1.find：找到祖先</span><br><span class="hljs-comment">    2.same:是否在同一个集合，同一根节点</span><br><span class="hljs-comment">    3.join,将两个节点连在同一节点</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] father;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Solution</span><span class="hljs-params">()</span>&#123;<br>         n=<span class="hljs-number">1005</span>;<br>         father=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            father[i]=i;<span class="hljs-comment">//父节点</span><br>         &#125;<br>     &#125;<br>     <span class="hljs-comment">//找到祖先</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>&#123;<br>         <span class="hljs-keyword">if</span>(u==father[u])<br>         <span class="hljs-keyword">return</span> u;<span class="hljs-comment">//base case:是根</span><br>         father[u]=find(father[u]);<span class="hljs-comment">//迭代找到祖先</span><br>         <span class="hljs-keyword">return</span> father[u];<br>     &#125;<br>     <span class="hljs-comment">//是否在同一集合，同一个根节点，就在同一集合</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">same</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">return</span> u==v;<br>     &#125;<br>     <span class="hljs-comment">//v-&gt;u 这条边加入并查集，调用find,进行路径压缩，直接与连在根节点上</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span>&#123;<br>         u=find(u);<br>         v=find(v);<br>        <span class="hljs-keyword">if</span>(u==v) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//已经存在</span><br>        father[v]=u;<br>     &#125;<br>     <span class="hljs-comment">//遍历边，如果已经在同一集合，结果又有新边，返回这条新边</span><br>     <span class="hljs-comment">//在并查集加入新边</span><br>     <span class="hljs-comment">//solution不用自己new</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findRedundantConnection(<span class="hljs-type">int</span>[][] edges) &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] line:edges)&#123;<br>            <span class="hljs-keyword">if</span>(same(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> line;<br>            <span class="hljs-keyword">else</span> join(line[<span class="hljs-number">0</span>],line[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <url>/2022/06/20/494%20%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a></h4><p>难度中等1166</p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><ul><li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。</li></ul><p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,1,1,1], target = 3<br>输出：5<br>解释：一共有<span class="hljs-number"> 5 </span>种方法让最终目标和为<span class="hljs-number"> 3 </span>。<br>-1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 -<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>= 3<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//0,1背包问题</span><br>    <span class="hljs-comment">//找到子集为4的集合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTargetSumWays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<br>            sum+=num;<br>        &#125;<br>      <span class="hljs-type">int</span> weight= (sum+target)&gt;&gt;<span class="hljs-number">1</span>;<br><br>      <span class="hljs-keyword">if</span>((sum+target)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> || weight&lt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[weight+<span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<span class="hljs-comment">//枚举i的质量</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=weight;j&gt;=num;j--)&#123;<span class="hljs-comment">//循环背包，--</span><br>                dp[j]+=dp[j-num];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[weight];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494.目标和</title>
    <link href="/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/416%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>难度中等1213</p><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：数组可以分割成 [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>] 和 [<span class="hljs-number">11</span>] 。<br></code></pre></td></tr></table></figure><p><strong>dp[ i] [j ]:长度为i的数组，可选可不选（0，1），他们的和能组成j,是true还是false</strong></p><p>边界条件：dp [] [0]&#x3D;true,这样状态转移方程中dp[i-1] [j-nums[i]]能等于true.</p><p>也可使用记忆化深度优先搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> dfs(nums,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,sum,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Boolean&gt;());<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[]nums,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> target, HashMap&lt;String,Boolean&gt; map)</span> &#123;<br>    <span class="hljs-comment">//map.put(index+&quot;&quot;+sum,);</span><br>    <span class="hljs-keyword">if</span>(map.containsKey(index+<span class="hljs-string">&quot;&quot;</span>+sum)) &#123;<br>    <span class="hljs-keyword">return</span> map.get(index+<span class="hljs-string">&quot;&quot;</span>+sum);<span class="hljs-comment">//在其他分支中已经算过的，相同的层次，相同的sum</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum*<span class="hljs-number">2</span>==target) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum&gt;target/<span class="hljs-number">2</span> || index&gt;=nums.length) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> partition= dfs(nums,index+<span class="hljs-number">1</span>,sum+nums[index],target,map)||dfs(nums,index+<span class="hljs-number">1</span>,sum,target,map);<br>    map.put(index+<span class="hljs-string">&quot;&quot;</span>+sum, partition);<br>    <span class="hljs-keyword">return</span> partition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dp:空间压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> element:nums) &#123;<br>    sum+=element;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> target=sum/<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> n=nums.length;<br>    <span class="hljs-type">boolean</span>[]dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[target+<span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//每一个i循环填充一个dp数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=target;j&gt;<span class="hljs-number">0</span>;j--) &#123;<span class="hljs-comment">//倒序遍历，取得上一行（i-1)数值</span><br>    <span class="hljs-keyword">if</span>(j&gt;=nums[i-<span class="hljs-number">1</span>])<br>    dp[j]=dp[j]||dp[j-nums[i-<span class="hljs-number">1</span>]];<br>    <span class="hljs-keyword">else</span> &#123;<br>    dp[j]=dp[j];<br>    &#125;<br>    &#125;<br>    <br>    &#125; <br>    <br>    <span class="hljs-keyword">return</span> dp[target];<br>    <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/27/rxy8XCv4RASj1Fu.png" alt="image-20220327162656248"></p><p>因为j-nums[i]&lt;j, 所以倒序。若按照从左往右的顺序进行正向遍历，则dp[j-w] 的值在遍历到j 之前就已经被更新成物品i 的值了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>312. 戳气球</title>
    <link href="/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/"/>
    <url>/2022/06/20/312%20%E6%88%B3%E6%B0%94%E7%90%83/</url>
    
    <content type="html"><![CDATA[<h4 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a><a href="https://leetcode-cn.com/problems/burst-balloons/">312. 戳气球</a></h4><p>难度困难972</p><p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n - 1</code>，每个气球上都标有一个数字，这些数字存在数组 <code>nums</code> 中。</p><p>现在要求你戳破所有的气球。戳破第 <code>i</code> 个气球，你可以获得 <code>nums[i - 1] * nums[i] * nums[i + 1]</code> 枚硬币。 这里的 <code>i - 1</code> 和 <code>i + 1</code> 代表和 <code>i</code> 相邻的两个气球的序号。如果 <code>i - 1</code>或 <code>i + 1</code> 超出了数组的边界，那么就当它是一个数字为 <code>1</code> 的气球。</p><p>求所能获得硬币的最大数量。</p><p><strong>示例 1：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">输入：nums = [3,1,5,8]<br>输出：167<br>解释：<br>nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []<br>coins =  3<span class="hljs-number">*1</span><span class="hljs-number">*5</span>    +   3<span class="hljs-number">*5</span><span class="hljs-number">*8</span>   +  1<span class="hljs-number">*3</span><span class="hljs-number">*8</span>  + 1<span class="hljs-number">*8</span><span class="hljs-number">*1</span> = 167<br></code></pre></td></tr></table></figure><p><strong>思路：</strong>如何找子问题（备忘录）存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *动态规划自底向上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 最后一个爆破的气球可以把左右区间区分开，他们之间没有关联（不会相乘），由此将这个问题分为两个子问题</span><br><span class="hljs-comment"> * dp[i][j]:在i到j之间能得到的最大值，不包括i,j</span><br><span class="hljs-comment"> * 逆向思考：k是最后一个爆破的气球，在(i,j)之间遍历k,取最大值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxCoins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] tmp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>];<br><br>        <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">2</span>][n+<span class="hljs-number">2</span>];<br><br>        System.arraycopy(nums,<span class="hljs-number">0</span>,tmp,<span class="hljs-number">1</span>,n);<br>        tmp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        tmp[n+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span>n-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">//开区间(i,j)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">2</span>; j &lt;=n+<span class="hljs-number">1</span> ; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; k &lt;j; k++) &#123;<br>                    dp[i][j]=Math.max(dp[i][j],dp[i][k]+dp[k][j]+tmp[k]*tmp[i]*tmp[j]);<br>                    <span class="hljs-comment">//dp[i][k]和dp[k][j]中j&gt;i+1,</span><br>                    <span class="hljs-comment">// 同时因为k&gt;i,所以i要从大到小遍历</span><br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>279.完全平方数</title>
    <link href="/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/20/279%20%E5%88%86%E5%89%B2%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h4><p>难度中等1288</p><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 12<br>输出：3 <br>解释：12 =<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+ 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">13</span><br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-number">13</span> = <span class="hljs-number">4</span> + <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><p><strong>题解：</strong></p><p><img src="https://s2.loli.net/2022/03/22/Bel2M41DkYdrajQ.png" alt="image-20220322135940585"></p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>213. 打家劫舍 II</title>
    <link href="/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/"/>
    <url>/2022/06/20/213%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/</url>
    
    <content type="html"><![CDATA[<h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II</a></h4><p>难度中等1025</p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2,3,2]<br>输出：3<br>解释：你不能先偷窃<span class="hljs-number"> 1 </span>号房屋（金额 = 2），然后偷窃<span class="hljs-number"> 3 </span>号房屋（金额 = 2）, 因为他们是相邻的。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    环形导致的bug点在于，可能导致第一家和最后一家都偷了。</span><br><span class="hljs-comment">    所以考虑不偷第一家，和不偷最后一家。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    不偷，即初始化为0。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    这两种情况中肯定有一种是最优解。找到其最大值，就是最优解。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> Math.max(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br><br>       dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷0</span><br>       dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//不偷第一家[1,n-1]</span><br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">2</span>]+nums[i]);<span class="hljs-comment">//不偷，偷</span><br>        &#125;<br>        <span class="hljs-type">int</span>[] dp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        dp2[n-<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//不偷n-1</span><br>        dp2[n-<span class="hljs-number">2</span>]=nums[n-<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n-<span class="hljs-number">3</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//不偷最后一家[0,n-2]</span><br>            dp2[i]=Math.max(dp2[i+<span class="hljs-number">1</span>],dp2[i+<span class="hljs-number">2</span>]+nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(dp[n-<span class="hljs-number">1</span>],dp2[<span class="hljs-number">0</span>]);<br>    &#125;<br>         <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>198.打家劫舍</title>
    <link href="/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/"/>
    <url>/2022/06/20/198%20%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DI/</url>
    
    <content type="html"><![CDATA[<ul><li><p>定义子问题</p></li><li><p>写出子问题的递推关系</p></li></ul><p><img src="https://i.loli.net/2021/06/25/LXWskUoR1PhQcTH.png" alt="image-20210625110148870"></p><p><img src="https://i.loli.net/2021/06/25/e18vCugpXQ5hMaq.png" alt="image-20210625110212850"></p><p>画图：子结构</p><p><img src="https://i.loli.net/2021/06/25/3qrtFW1nUhayMdD.png" alt="image-20210625113744123"></p><p><img src="https://i.loli.net/2021/06/25/LkKPqv7GpF2rB1w.png" alt="image-20210625114057234"></p><p>思路：动态规划。</p><ul><li>定义子问题——偷K间房屋能偷到的最大金额: f(K)</li><li>状态转移方程——第K间房屋只有两种选择，偷或者不偷。f(K)&#x3D;max{nums[K-1]+f(K-2),f(K-1)}</li><li>边界条件：没有房屋&amp;只有一间房屋</li></ul><p>TC:O(N)</p><p>SC:O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span>(nums==<span class="hljs-literal">null</span>||nums.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> N=nums.length;<br>        <span class="hljs-type">int</span>[] dp= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)&#123;<br>            dp[i]=Math.max(dp[i-<span class="hljs-number">1</span>],nums[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]);<span class="hljs-comment">//自底向上，dp[i]：偷前i间最大金额</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[N];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2226.每个小孩最多能分多少糖果</title>
    <link href="/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <url>/2022/06/20/2226%20%E5%88%86%E7%B3%96%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="2226-每个小孩最多能分到多少糖果"><a href="#2226-每个小孩最多能分到多少糖果" class="headerlink" title="2226. 每个小孩最多能分到多少糖果"></a><a href="https://leetcode-cn.com/problems/maximum-candies-allocated-to-k-children/">2226. 每个小孩最多能分到多少糖果</a></h4><p>难度中等18</p><p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>candies</code> 。数组中的每个元素表示大小为 <code>candies[i]</code> 的一堆糖果。你可以将每堆糖果分成任意数量的 <strong>子堆</strong> ，但 <strong>无法</strong> 再将两堆合并到一起。</p><p>另给你一个整数 <code>k</code> 。你需要将这些糖果分配给 <code>k</code> 个小孩，使每个小孩分到 <strong>相同</strong> 数量的糖果。每个小孩可以拿走 <strong>至多一堆</strong> 糖果，有些糖果可能会不被分配。</p><p>返回每个小孩可以拿走的 <strong>最大糖果数目</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumCandies</span><span class="hljs-params">(<span class="hljs-type">int</span>[] candies, <span class="hljs-type">long</span> k)</span> &#123;<br>       <br>        <span class="hljs-type">long</span> max=(<span class="hljs-type">long</span>)<span class="hljs-number">1e7</span>;<br>      <span class="hljs-comment">//  int min=candies[0];</span><br>     <span class="hljs-type">long</span> left=-<span class="hljs-number">1</span>; <span class="hljs-type">long</span> right=max+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left+<span class="hljs-number">1</span>!=right)&#123;<span class="hljs-comment">// </span><br>            <span class="hljs-type">long</span> mid=left+(right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-type">long</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:candies)&#123;<br>                count+=num/mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count&lt;k) right=mid;<br>            <span class="hljs-keyword">else</span> left=mid;足条件的最大值<br>           <br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)left;<span class="hljs-comment">//返回Left</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
